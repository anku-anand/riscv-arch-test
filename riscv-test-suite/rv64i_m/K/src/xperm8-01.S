
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Tue May 24 03:42:23 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/trials/bcrypto/64/dataset.cgf \
//                  --cgf /home/anku/trials/bcrypto/64/rv64i_k.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xperm8 instruction of the RISC-V RV64K,RV64Zk,RV64Zbk,RV64Zbkx,RV64Zkn,RV64Zks extension for the xperm8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IK,RV64IZk,RV64IZbk,RV64IZbkx,RV64IZkn,RV64IZks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm8)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zk.*);def TEST_CASE_1=True;",xperm8)

RVTEST_CASE(2,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm8)

RVTEST_CASE(3,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm8)

RVTEST_CASE(4,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zbkx.*);def TEST_CASE_1=True;",xperm8)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31, rs1_val == 0x0000000000000000 and rs2_val == 0xE3E70682C2094CAC 
// opcode: xperm8 ; op1:x30; op2:x31; dest:x31; op1val:0x0;  op2val:0xe3e70682c2094cac
TEST_RR_OP(xperm8, x31, x30, x31, 0x0000000000000000, 0x0, 0xe3e70682c2094cac, x1, 0, x2)

inst_1:
// rs1 == rd != rs2, rs1==x29, rs2==x30, rd==x29, rs2_val == 0x0000000000000000 and rs1_val == 0x4A82E06A2F16FB50 
// opcode: xperm8 ; op1:x29; op2:x30; dest:x29; op1val:0x4a82e06a2f16fb50;  op2val:0x0
TEST_RR_OP(xperm8, x29, x29, x30, 0x0000000000000000, 0x4a82e06a2f16fb50, 0x0, x1, 8, x2)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30, rs2_val == 0x8000000000000000 and rs1_val == 0x280A07EE4EC985FF 
// opcode: xperm8 ; op1:x31; op2:x29; dest:x30; op1val:0x280a07ee4ec985ff;  op2val:0x8000000000000000
TEST_RR_OP(xperm8, x30, x31, x29, 0x0000000000000000, 0x280a07ee4ec985ff, 0x8000000000000000, x1, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs2_val == 0x4000000000000000 and rs1_val == 0x14AFE646FE3216BD 
// opcode: xperm8 ; op1:x28; op2:x28; dest:x28; op1val:0x14afe646fe3216bd;  op2val:0x14afe646fe3216bd
TEST_RR_OP(xperm8, x28, x28, x28, 0x0000000000000000, 0x14afe646fe3216bd, 0x14afe646fe3216bd, x1, 24, x2)

inst_4:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x27, rs2_val == 0xE000000000000000 and rs1_val == 0x55C36C3D5CBBC080 
// opcode: xperm8 ; op1:x26; op2:x26; dest:x27; op1val:0x55c36c3d5cbbc080;  op2val:0x55c36c3d5cbbc080
TEST_RR_OP(xperm8, x27, x26, x26, 0x0000000000000000, 0x55c36c3d5cbbc080, 0x55c36c3d5cbbc080, x1, 32, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26, rs2_val == 0x9000000000000000 and rs1_val == 0x215203C7421AA15E 
// opcode: xperm8 ; op1:x27; op2:x25; dest:x26; op1val:0x215203c7421aa15e;  op2val:0x9000000000000000
TEST_RR_OP(xperm8, x26, x27, x25, 0x0000000000000000, 0x215203c7421aa15e, 0x9000000000000000, x1, 40, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25, rs2_val == 0xB800000000000000 and rs1_val == 0x7A089CA81CC5A8A0 
// opcode: xperm8 ; op1:x24; op2:x27; dest:x25; op1val:0x7a089ca81cc5a8a0;  op2val:0xb800000000000000
TEST_RR_OP(xperm8, x25, x24, x27, 0x0000000000000000, 0x7a089ca81cc5a8a0, 0xb800000000000000, x1, 48, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, rs2_val == 0xBC00000000000000 and rs1_val == 0xDBF2EED13B9CEA95 
// opcode: xperm8 ; op1:x25; op2:x23; dest:x24; op1val:0xdbf2eed13b9cea95;  op2val:0xbc00000000000000
TEST_RR_OP(xperm8, x24, x25, x23, 0x0000000000000000, 0xdbf2eed13b9cea95, 0xbc00000000000000, x1, 56, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, rs2_val == 0x6200000000000000 and rs1_val == 0xE6A1A40BF031F4B9 
// opcode: xperm8 ; op1:x22; op2:x24; dest:x23; op1val:0xe6a1a40bf031f4b9;  op2val:0x6200000000000000
TEST_RR_OP(xperm8, x23, x22, x24, 0x0000000000000000, 0xe6a1a40bf031f4b9, 0x6200000000000000, x1, 64, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, rs2_val == 0x2300000000000000 and rs1_val == 0x24AEBA79E4B82987 
// opcode: xperm8 ; op1:x23; op2:x21; dest:x22; op1val:0x24aeba79e4b82987;  op2val:0x2300000000000000
TEST_RR_OP(xperm8, x22, x23, x21, 0x0000000000000000, 0x24aeba79e4b82987, 0x2300000000000000, x1, 72, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, rs2_val == 0x5580000000000000 and rs1_val == 0xB1182D235BF80676 
// opcode: xperm8 ; op1:x20; op2:x22; dest:x21; op1val:0xb1182d235bf80676;  op2val:0x5580000000000000
TEST_RR_OP(xperm8, x21, x20, x22, 0x0000000000000000, 0xb1182d235bf80676, 0x5580000000000000, x1, 80, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, rs2_val == 0xA6C0000000000000 and rs1_val == 0x141B1A1B40A978BF 
// opcode: xperm8 ; op1:x21; op2:x19; dest:x20; op1val:0x141b1a1b40a978bf;  op2val:0xa6c0000000000000
TEST_RR_OP(xperm8, x20, x21, x19, 0x0000000000000000, 0x141b1a1b40a978bf, 0xa6c0000000000000, x1, 88, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, rs2_val == 0x8420000000000000 and rs1_val == 0x07B6E08E6AC1CA75 
// opcode: xperm8 ; op1:x18; op2:x20; dest:x19; op1val:0x7b6e08e6ac1ca75;  op2val:0x8420000000000000
TEST_RR_OP(xperm8, x19, x18, x20, 0x0000000000000000, 0x7b6e08e6ac1ca75, 0x8420000000000000, x1, 96, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, rs2_val == 0xB030000000000000 and rs1_val == 0xCA9571E407DC02B1 
// opcode: xperm8 ; op1:x19; op2:x17; dest:x18; op1val:0xca9571e407dc02b1;  op2val:0xb030000000000000
TEST_RR_OP(xperm8, x18, x19, x17, 0x0000000000000000, 0xca9571e407dc02b1, 0xb030000000000000, x1, 104, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, rs2_val == 0xAFD8000000000000 and rs1_val == 0xC618FC1E6A480542 
// opcode: xperm8 ; op1:x16; op2:x18; dest:x17; op1val:0xc618fc1e6a480542;  op2val:0xafd8000000000000
TEST_RR_OP(xperm8, x17, x16, x18, 0x0000000000000000, 0xc618fc1e6a480542, 0xafd8000000000000, x1, 112, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, rs2_val == 0x9BDC000000000000 and rs1_val == 0x1AD1DAAAEF8D9FF0 
// opcode: xperm8 ; op1:x17; op2:x15; dest:x16; op1val:0x1ad1daaaef8d9ff0;  op2val:0x9bdc000000000000
TEST_RR_OP(xperm8, x16, x17, x15, 0x0000000000000000, 0x1ad1daaaef8d9ff0, 0x9bdc000000000000, x1, 120, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, rs2_val == 0xEF5E000000000000 and rs1_val == 0x90E639E1E44FC3A9 
// opcode: xperm8 ; op1:x14; op2:x16; dest:x15; op1val:0x90e639e1e44fc3a9;  op2val:0xef5e000000000000
TEST_RR_OP(xperm8, x15, x14, x16, 0x0000000000000000, 0x90e639e1e44fc3a9, 0xef5e000000000000, x1, 128, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, rs2_val == 0x6433000000000000 and rs1_val == 0xF20B575D4E28E674 
// opcode: xperm8 ; op1:x15; op2:x13; dest:x14; op1val:0xf20b575d4e28e674;  op2val:0x6433000000000000
TEST_RR_OP(xperm8, x14, x15, x13, 0x0000000000000000, 0xf20b575d4e28e674, 0x6433000000000000, x1, 136, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, rs2_val == 0x4EC5800000000000 and rs1_val == 0x3ACAAF82374A6CC9 
// opcode: xperm8 ; op1:x12; op2:x14; dest:x13; op1val:0x3acaaf82374a6cc9;  op2val:0x4ec5800000000000
TEST_RR_OP(xperm8, x13, x12, x14, 0x0000000000000000, 0x3acaaf82374a6cc9, 0x4ec5800000000000, x1, 144, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, rs2_val == 0x6671400000000000 and rs1_val == 0x7C7550F20A3C2C6F 
// opcode: xperm8 ; op1:x13; op2:x11; dest:x12; op1val:0x7c7550f20a3c2c6f;  op2val:0x6671400000000000
TEST_RR_OP(xperm8, x12, x13, x11, 0x0000000000000000, 0x7c7550f20a3c2c6f, 0x6671400000000000, x1, 152, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, rs2_val == 0xCE83200000000000 and rs1_val == 0x71CFF814645BD776 
// opcode: xperm8 ; op1:x10; op2:x12; dest:x11; op1val:0x71cff814645bd776;  op2val:0xce83200000000000
TEST_RR_OP(xperm8, x11, x10, x12, 0x0000000000000000, 0x71cff814645bd776, 0xce83200000000000, x1, 160, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, rs2_val == 0xDA9BB00000000000 and rs1_val == 0xFEEF71CBC915D113 
// opcode: xperm8 ; op1:x11; op2:x9; dest:x10; op1val:0xfeef71cbc915d113;  op2val:0xda9bb00000000000
TEST_RR_OP(xperm8, x10, x11, x9, 0x0000000000000000, 0xfeef71cbc915d113, 0xda9bb00000000000, x1, 168, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, rs2_val == 0xC910E80000000000 and rs1_val == 0xCF6C9992FBBFF9E0 
// opcode: xperm8 ; op1:x8; op2:x10; dest:x9; op1val:0xcf6c9992fbbff9e0;  op2val:0xc910e80000000000
TEST_RR_OP(xperm8, x9, x8, x10, 0x0000000000000000, 0xcf6c9992fbbff9e0, 0xc910e80000000000, x1, 176, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, rs2_val == 0x7DF9140000000000 and rs1_val == 0xCCA1A034633CBF79 
// opcode: xperm8 ; op1:x9; op2:x7; dest:x8; op1val:0xcca1a034633cbf79;  op2val:0x7df9140000000000
TEST_RR_OP(xperm8, x8, x9, x7, 0x0000000000000000, 0xcca1a034633cbf79, 0x7df9140000000000, x1, 184, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, rs2_val == 0xD496BE0000000000 and rs1_val == 0x9F3DD894B6AF98B2 
// opcode: xperm8 ; op1:x6; op2:x8; dest:x7; op1val:0x9f3dd894b6af98b2;  op2val:0xd496be0000000000
TEST_RR_OP(xperm8, x7, x6, x8, 0x0000000000000000, 0x9f3dd894b6af98b2, 0xd496be0000000000, x1, 192, x2)

inst_25:
// rs1==x7, rs2==x5, rd==x6, rs2_val == 0x276CBD0000000000 and rs1_val == 0xC707AEF9C6C3744C 
// opcode: xperm8 ; op1:x7; op2:x5; dest:x6; op1val:0xc707aef9c6c3744c;  op2val:0x276cbd0000000000
TEST_RR_OP(xperm8, x6, x7, x5, 0x0000000000000000, 0xc707aef9c6c3744c, 0x276cbd0000000000, x1, 200, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x4, rs2==x6, rd==x5, rs2_val == 0xA2BC4D8000000000 and rs1_val == 0x58BF3B9EA6245B59 
// opcode: xperm8 ; op1:x4; op2:x6; dest:x5; op1val:0x58bf3b9ea6245b59;  op2val:0xa2bc4d8000000000
TEST_RR_OP(xperm8, x5, x4, x6, 0x0000000000000000, 0x58bf3b9ea6245b59, 0xa2bc4d8000000000, x7, 0, x8)

inst_27:
// rs1==x5, rs2==x3, rd==x4, rs2_val == 0x4B6AB54000000000 and rs1_val == 0x9E0DF45B992A34A1 
// opcode: xperm8 ; op1:x5; op2:x3; dest:x4; op1val:0x9e0df45b992a34a1;  op2val:0x4b6ab54000000000
TEST_RR_OP(xperm8, x4, x5, x3, 0x0000000000000000, 0x9e0df45b992a34a1, 0x4b6ab54000000000, x7, 8, x8)

inst_28:
// rs1==x2, rs2==x4, rd==x3, rs2_val == 0x814B2D2000000000 and rs1_val == 0xC734BB05788C31F6 
// opcode: xperm8 ; op1:x2; op2:x4; dest:x3; op1val:0xc734bb05788c31f6;  op2val:0x814b2d2000000000
TEST_RR_OP(xperm8, x3, x2, x4, 0x0000000000000000, 0xc734bb05788c31f6, 0x814b2d2000000000, x7, 16, x8)

inst_29:
// rs1==x3, rs2==x1, rd==x2, rs2_val == 0x9018AEF000000000 and rs1_val == 0x62FDA854775E0EC3 
// opcode: xperm8 ; op1:x3; op2:x1; dest:x2; op1val:0x62fda854775e0ec3;  op2val:0x9018aef000000000
TEST_RR_OP(xperm8, x2, x3, x1, 0x0000000000000000, 0x62fda854775e0ec3, 0x9018aef000000000, x7, 24, x8)

inst_30:
// rs1==x0, rs2==x2, rd==x1, rs2_val == 0x2092BCF800000000 and rs1_val == 0x5A4F4145FC98C279 
// opcode: xperm8 ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:0x2092bcf800000000
TEST_RR_OP(xperm8, x1, x0, x2, 0x0000000000000000, 0x0, 0x2092bcf800000000, x7, 32, x8)

inst_31:
// rs1==x1, rs2_val == 0xEAF51D1C00000000 and rs1_val == 0x7B38785B0932F5B6 
// opcode: xperm8 ; op1:x1; op2:x30; dest:x31; op1val:0x7b38785b0932f5b6;  op2val:0xeaf51d1c00000000
TEST_RR_OP(xperm8, x31, x1, x30, 0x0000000000000000, 0x7b38785b0932f5b6, 0xeaf51d1c00000000, x7, 40, x8)

inst_32:
// rs2==x0, rs2_val == 0x482F2AE200000000 and rs1_val == 0x3D2BF042209818D1 
// opcode: xperm8 ; op1:x30; op2:x0; dest:x31; op1val:0x3d2bf042209818d1;  op2val:0x0
TEST_RR_OP(xperm8, x31, x30, x0, 0x0000000000000000, 0x3d2bf042209818d1, 0x0, x7, 48, x8)

inst_33:
// rd==x0, rs2_val == 0x10CC871300000000 and rs1_val == 0x0FF030B86238D0A0 
// opcode: xperm8 ; op1:x31; op2:x30; dest:x0; op1val:0xff030b86238d0a0;  op2val:0x10cc871300000000
TEST_RR_OP(xperm8, x0, x31, x30, 0x0000000000000000, 0xff030b86238d0a0, 0x10cc871300000000, x7, 56, x8)

inst_34:
// rs2_val == 0x26B66BC180000000 and rs1_val == 0x4124405B91FCFE88 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4124405b91fcfe88;  op2val:0x26b66bc180000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4124405b91fcfe88, 0x26b66bc180000000, x7, 64, x8)

inst_35:
// rs2_val == 0x6A0C08EB40000000 and rs1_val == 0xBDA17DA2000FC63D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xbda17da2000fc63d;  op2val:0x6a0c08eb40000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xbda17da2000fc63d, 0x6a0c08eb40000000, x7, 72, x8)

inst_36:
// rs2_val == 0x3A6C1B4D60000000 and rs1_val == 0xCC4DA021DD620222 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcc4da021dd620222;  op2val:0x3a6c1b4d60000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcc4da021dd620222, 0x3a6c1b4d60000000, x7, 80, x8)

inst_37:
// rs2_val == 0x04A276DDB0000000 and rs1_val == 0x993EC8C6E6B106E2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x993ec8c6e6b106e2;  op2val:0x4a276ddb0000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x993ec8c6e6b106e2, 0x4a276ddb0000000, x7, 88, x8)

inst_38:
// rs2_val == 0xC5F9C8FDE8000000 and rs1_val == 0xC12EA9B8E7E13ED8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc12ea9b8e7e13ed8;  op2val:0xc5f9c8fde8000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc12ea9b8e7e13ed8, 0xc5f9c8fde8000000, x7, 96, x8)

inst_39:
// rs2_val == 0x5AB6DB68DC000000 and rs1_val == 0xFD938ADC99A2ECB1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd938adc99a2ecb1;  op2val:0x5ab6db68dc000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfd938adc99a2ecb1, 0x5ab6db68dc000000, x7, 104, x8)

inst_40:
// rs2_val == 0x73028F51EA000000 and rs1_val == 0x92E94E89089B30A0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x92e94e89089b30a0;  op2val:0x73028f51ea000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x92e94e89089b30a0, 0x73028f51ea000000, x7, 112, x8)

inst_41:
// rs2_val == 0x5CDE62D441000000 and rs1_val == 0xF7F60E7F75F2BC20 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f60e7f75f2bc20;  op2val:0x5cde62d441000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf7f60e7f75f2bc20, 0x5cde62d441000000, x7, 120, x8)

inst_42:
// rs2_val == 0x0E612397EB800000 and rs1_val == 0xCCF719AB2922FBD8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xccf719ab2922fbd8;  op2val:0xe612397eb800000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xccf719ab2922fbd8, 0xe612397eb800000, x7, 128, x8)

inst_43:
// rs2_val == 0x204E67E2A4400000 and rs1_val == 0x4CEA2DF00A66DC4E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4cea2df00a66dc4e;  op2val:0x204e67e2a4400000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4cea2df00a66dc4e, 0x204e67e2a4400000, x7, 136, x8)

inst_44:
// rs2_val == 0x86D2A782F1E00000 and rs1_val == 0x0A1727F7EA5F24B6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa1727f7ea5f24b6;  op2val:0x86d2a782f1e00000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa1727f7ea5f24b6, 0x86d2a782f1e00000, x7, 144, x8)

inst_45:
// rs2_val == 0x3FB9A431F7B00000 and rs1_val == 0xD7A3283C27E969E2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xd7a3283c27e969e2;  op2val:0x3fb9a431f7b00000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xd7a3283c27e969e2, 0x3fb9a431f7b00000, x7, 152, x8)

inst_46:
// rs2_val == 0x6D1013E00A080000 and rs1_val == 0xDFDE228125FB5F3D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfde228125fb5f3d;  op2val:0x6d1013e00a080000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdfde228125fb5f3d, 0x6d1013e00a080000, x7, 160, x8)

inst_47:
// rs2_val == 0x58168A4E6CF40000 and rs1_val == 0xEE6A8E2F9C19ED34 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xee6a8e2f9c19ed34;  op2val:0x58168a4e6cf40000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xee6a8e2f9c19ed34, 0x58168a4e6cf40000, x7, 168, x8)

inst_48:
// rs2_val == 0x0A764BFB597E0000 and rs1_val == 0xFF88EC827F99D273 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xff88ec827f99d273;  op2val:0xa764bfb597e0000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xff88ec827f99d273, 0xa764bfb597e0000, x7, 176, x8)

inst_49:
// rs2_val == 0xB3ED755A3AC30000 and rs1_val == 0xFBA52E5998A33736 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfba52e5998a33736;  op2val:0xb3ed755a3ac30000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfba52e5998a33736, 0xb3ed755a3ac30000, x7, 184, x8)

inst_50:
// rs2_val == 0xCC2FFF9F05D18000 and rs1_val == 0x1AC902EE25777CF0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ac902ee25777cf0;  op2val:0xcc2fff9f05d18000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1ac902ee25777cf0, 0xcc2fff9f05d18000, x7, 192, x8)

inst_51:
// rs2_val == 0x29B8597812654000 and rs1_val == 0xA41865BF350D278D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa41865bf350d278d;  op2val:0x29b8597812654000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa41865bf350d278d, 0x29b8597812654000, x7, 200, x8)

inst_52:
// rs2_val == 0xFFBD662469DFE000 and rs1_val == 0x1E70E79933A1D1C2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1e70e79933a1d1c2;  op2val:0xffbd662469dfe000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1e70e79933a1d1c2, 0xffbd662469dfe000, x7, 208, x8)

inst_53:
// rs2_val == 0xAF4586C4C3937000 and rs1_val == 0x2AA50F4EC6F00933 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x2aa50f4ec6f00933;  op2val:0xaf4586c4c3937000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x2aa50f4ec6f00933, 0xaf4586c4c3937000, x7, 216, x8)

inst_54:
// rs2_val == 0xDC56F8101430E800 and rs1_val == 0xADE6C5E9B6E355F6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xade6c5e9b6e355f6;  op2val:0xdc56f8101430e800
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xade6c5e9b6e355f6, 0xdc56f8101430e800, x7, 224, x8)

inst_55:
// rs2_val == 0x28BB8C436A2A5C00 and rs1_val == 0x0FA7EE0538974DF5 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa7ee0538974df5;  op2val:0x28bb8c436a2a5c00
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfa7ee0538974df5, 0x28bb8c436a2a5c00, x7, 232, x8)

inst_56:
// rs2_val == 0x047DB540E4554200 and rs1_val == 0xA38D8AFCFDD2ED7A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa38d8afcfdd2ed7a;  op2val:0x47db540e4554200
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa38d8afcfdd2ed7a, 0x47db540e4554200, x7, 240, x8)

inst_57:
// rs2_val == 0xC7ED9D4D4985DD00 and rs1_val == 0xEB70BA6527D99A23 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xeb70ba6527d99a23;  op2val:0xc7ed9d4d4985dd00
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xeb70ba6527d99a23, 0xc7ed9d4d4985dd00, x7, 248, x8)

inst_58:
// rs2_val == 0x8C56A60ED95A2980 and rs1_val == 0x6D316B4A7F6B8793 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6d316b4a7f6b8793;  op2val:0x8c56a60ed95a2980
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x6d316b4a7f6b8793, 0x8c56a60ed95a2980, x7, 256, x8)

inst_59:
// rs2_val == 0xD075825592BA42C0 and rs1_val == 0x1FD3C01757F98D1E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fd3c01757f98d1e;  op2val:0xd075825592ba42c0
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1fd3c01757f98d1e, 0xd075825592ba42c0, x7, 264, x8)

inst_60:
// rs2_val == 0xF251B8A32E499CA0 and rs1_val == 0x7B2E1B82E89DC815 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7b2e1b82e89dc815;  op2val:0xf251b8a32e499ca0
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7b2e1b82e89dc815, 0xf251b8a32e499ca0, x7, 272, x8)

inst_61:
// rs2_val == 0x419EEFCD5E73E410 and rs1_val == 0x6A2B32004C9A0AE1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6a2b32004c9a0ae1;  op2val:0x419eefcd5e73e410
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x6a2b32004c9a0ae1, 0x419eefcd5e73e410, x7, 280, x8)

inst_62:
// rs2_val == 0x6FCB3A3A7689AAA8 and rs1_val == 0x4D7BD307122411E6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4d7bd307122411e6;  op2val:0x6fcb3a3a7689aaa8
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4d7bd307122411e6, 0x6fcb3a3a7689aaa8, x7, 288, x8)

inst_63:
// rs2_val == 0xEC0DE3ADE989C8BC and rs1_val == 0xEF0A81ED3D5D60BC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xef0a81ed3d5d60bc;  op2val:0xec0de3ade989c8bc
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xef0a81ed3d5d60bc, 0xec0de3ade989c8bc, x7, 296, x8)

inst_64:
// rs2_val == 0x18D2EF1FFA85ED32 and rs1_val == 0x4B1CB8BD2130260C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4b1cb8bd2130260c;  op2val:0x18d2ef1ffa85ed32
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4b1cb8bd2130260c, 0x18d2ef1ffa85ed32, x7, 304, x8)

inst_65:
// rs2_val == 0x29F2C3C74505F4F7 and rs1_val == 0x5C6460364A1EB1B7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5c6460364a1eb1b7;  op2val:0x29f2c3c74505f4f7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5c6460364a1eb1b7, 0x29f2c3c74505f4f7, x7, 312, x8)

inst_66:
// rs1_val == 0x0000000000000000 and rs2_val == 0x09215F4F9EDB95F2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x9215f4f9edb95f2
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x0, 0x9215f4f9edb95f2, x7, 320, x8)

inst_67:
// rs1_val == 0x8000000000000000 and rs2_val == 0xB7EF941C5E00EA6D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000000;  op2val:0xb7ef941c5e00ea6d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x8000000000000000, 0xb7ef941c5e00ea6d, x7, 328, x8)

inst_68:
// rs1_val == 0xC000000000000000 and rs2_val == 0x0247145F4A814D53 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000000;  op2val:0x247145f4a814d53
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc000000000000000, 0x247145f4a814d53, x7, 336, x8)

inst_69:
// rs1_val == 0xE000000000000000 and rs2_val == 0x2DA44DA189B5B368 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xe000000000000000;  op2val:0x2da44da189b5b368
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xe000000000000000, 0x2da44da189b5b368, x7, 344, x8)

inst_70:
// rs1_val == 0x9000000000000000 and rs2_val == 0xA7C5CB879B8B71A1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9000000000000000;  op2val:0xa7c5cb879b8b71a1
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9000000000000000, 0xa7c5cb879b8b71a1, x7, 352, x8)

inst_71:
// rs1_val == 0xF800000000000000 and rs2_val == 0x8EF066D44279B14D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf800000000000000;  op2val:0x8ef066d44279b14d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf800000000000000, 0x8ef066d44279b14d, x7, 360, x8)

inst_72:
// rs1_val == 0xA400000000000000 and rs2_val == 0x0AD4041504C14982 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa400000000000000;  op2val:0xad4041504c14982
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa400000000000000, 0xad4041504c14982, x7, 368, x8)

inst_73:
// rs1_val == 0x8200000000000000 and rs2_val == 0xCAD6E514CCC14D51 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x8200000000000000;  op2val:0xcad6e514ccc14d51
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x8200000000000000, 0xcad6e514ccc14d51, x7, 376, x8)

inst_74:
// rs1_val == 0xC900000000000000 and rs2_val == 0x0597AAB614D30DBC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc900000000000000;  op2val:0x597aab614d30dbc
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc900000000000000, 0x597aab614d30dbc, x7, 384, x8)

inst_75:
// rs1_val == 0x7B80000000000000 and rs2_val == 0x2EA60B99FA7FF8BF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7b80000000000000;  op2val:0x2ea60b99fa7ff8bf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7b80000000000000, 0x2ea60b99fa7ff8bf, x7, 392, x8)

inst_76:
// rs1_val == 0x43C0000000000000 and rs2_val == 0xDFA7C6ED32D1F81B 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x43c0000000000000;  op2val:0xdfa7c6ed32d1f81b
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x43c0000000000000, 0xdfa7c6ed32d1f81b, x7, 400, x8)

inst_77:
// rs1_val == 0x3EE0000000000000 and rs2_val == 0x30C1FB6A19086515 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ee0000000000000;  op2val:0x30c1fb6a19086515
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3ee0000000000000, 0x30c1fb6a19086515, x7, 408, x8)

inst_78:
// rs1_val == 0x7950000000000000 and rs2_val == 0x6AE04D52ADB328CB 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7950000000000000;  op2val:0x6ae04d52adb328cb
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7950000000000000, 0x6ae04d52adb328cb, x7, 416, x8)

inst_79:
// rs1_val == 0x81C8000000000000 and rs2_val == 0xFCA055362169DF82 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x81c8000000000000;  op2val:0xfca055362169df82
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x81c8000000000000, 0xfca055362169df82, x7, 424, x8)

inst_80:
// rs1_val == 0xB634000000000000 and rs2_val == 0x6A46721ACFFA6CDD 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb634000000000000;  op2val:0x6a46721acffa6cdd
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb634000000000000, 0x6a46721acffa6cdd, x7, 432, x8)

inst_81:
// rs1_val == 0xF0A2000000000000 and rs2_val == 0xD675EBF74FE30C9A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf0a2000000000000;  op2val:0xd675ebf74fe30c9a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf0a2000000000000, 0xd675ebf74fe30c9a, x7, 440, x8)

inst_82:
// rs1_val == 0xF537000000000000 and rs2_val == 0xE245A4600004884C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf537000000000000;  op2val:0xe245a4600004884c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf537000000000000, 0xe245a4600004884c, x7, 448, x8)

inst_83:
// rs1_val == 0x4CF2800000000000 and rs2_val == 0xB3969057425CB200 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4cf2800000000000;  op2val:0xb3969057425cb200
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4cf2800000000000, 0xb3969057425cb200, x7, 456, x8)

inst_84:
// rs1_val == 0x7DA0C00000000000 and rs2_val == 0x0BF9C0EFB5816B74 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7da0c00000000000;  op2val:0xbf9c0efb5816b74
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7da0c00000000000, 0xbf9c0efb5816b74, x7, 464, x8)

inst_85:
// rs1_val == 0x5F31600000000000 and rs2_val == 0x9145DE05B3AB1B2C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5f31600000000000;  op2val:0x9145de05b3ab1b2c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5f31600000000000, 0x9145de05b3ab1b2c, x7, 472, x8)

inst_86:
// rs1_val == 0xF147300000000000 and rs2_val == 0x6A1689ADDFE1B307 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf147300000000000;  op2val:0x6a1689addfe1b307
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf147300000000000, 0x6a1689addfe1b307, x7, 480, x8)

inst_87:
// rs1_val == 0xD7E8280000000000 and rs2_val == 0xA32C9B6F391CF046 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xd7e8280000000000;  op2val:0xa32c9b6f391cf046
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xd7e8280000000000, 0xa32c9b6f391cf046, x7, 488, x8)

inst_88:
// rs1_val == 0xCBE3740000000000 and rs2_val == 0xB2D650AF313B32B7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcbe3740000000000;  op2val:0xb2d650af313b32b7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcbe3740000000000, 0xb2d650af313b32b7, x7, 496, x8)

inst_89:
// rs1_val == 0x65A8E20000000000 and rs2_val == 0xBF9CC545635518F7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x65a8e20000000000;  op2val:0xbf9cc545635518f7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x65a8e20000000000, 0xbf9cc545635518f7, x7, 504, x8)

inst_90:
// rs1_val == 0x31D9B30000000000 and rs2_val == 0x9EFEE464DA90F534 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x31d9b30000000000;  op2val:0x9efee464da90f534
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x31d9b30000000000, 0x9efee464da90f534, x7, 512, x8)

inst_91:
// rs1_val == 0xAC42E58000000000 and rs2_val == 0x7B59051BF40048D7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xac42e58000000000;  op2val:0x7b59051bf40048d7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xac42e58000000000, 0x7b59051bf40048d7, x7, 520, x8)

inst_92:
// rs1_val == 0x75F4674000000000 and rs2_val == 0xBD30291A55FEA08E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x75f4674000000000;  op2val:0xbd30291a55fea08e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x75f4674000000000, 0xbd30291a55fea08e, x7, 528, x8)

inst_93:
// rs1_val == 0xC41028A000000000 and rs2_val == 0x032F06CAB0D9C2AA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc41028a000000000;  op2val:0x32f06cab0d9c2aa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc41028a000000000, 0x32f06cab0d9c2aa, x7, 536, x8)

inst_94:
// rs1_val == 0xE68690B000000000 and rs2_val == 0xEAE2025E82339E23 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xe68690b000000000;  op2val:0xeae2025e82339e23
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xe68690b000000000, 0xeae2025e82339e23, x7, 544, x8)

inst_95:
// rs1_val == 0xBD0E5B9800000000 and rs2_val == 0x0361524C2CC0F859 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xbd0e5b9800000000;  op2val:0x361524c2cc0f859
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xbd0e5b9800000000, 0x361524c2cc0f859, x7, 552, x8)

inst_96:
// rs1_val == 0x6F291EFC00000000 and rs2_val == 0xD86DBF1128805C5D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6f291efc00000000;  op2val:0xd86dbf1128805c5d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x6f291efc00000000, 0xd86dbf1128805c5d, x7, 560, x8)

inst_97:
// rs1_val == 0x1429721600000000 and rs2_val == 0x3308FB2E642AAD48 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1429721600000000;  op2val:0x3308fb2e642aad48
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1429721600000000, 0x3308fb2e642aad48, x7, 568, x8)

inst_98:
// rs1_val == 0x6FA231EB00000000 and rs2_val == 0x80EE526E0FA07A3F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6fa231eb00000000;  op2val:0x80ee526e0fa07a3f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x6fa231eb00000000, 0x80ee526e0fa07a3f, x7, 576, x8)

inst_99:
// rs1_val == 0x9C44223D80000000 and rs2_val == 0x4D125E7FA59CEC98 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9c44223d80000000;  op2val:0x4d125e7fa59cec98
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9c44223d80000000, 0x4d125e7fa59cec98, x7, 584, x8)

inst_100:
// rs1_val == 0x67B7E8F6C0000000 and rs2_val == 0x428A1C22D5FDB76A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x67b7e8f6c0000000;  op2val:0x428a1c22d5fdb76a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x67b7e8f6c0000000, 0x428a1c22d5fdb76a, x7, 592, x8)

inst_101:
// rs1_val == 0x7744DB0A60000000 and rs2_val == 0x8B53031D05D51433 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7744db0a60000000;  op2val:0x8b53031d05d51433
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7744db0a60000000, 0x8b53031d05d51433, x7, 600, x8)

inst_102:
// rs1_val == 0x40950FD150000000 and rs2_val == 0x7AAF0E891FB797FA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x40950fd150000000;  op2val:0x7aaf0e891fb797fa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x40950fd150000000, 0x7aaf0e891fb797fa, x7, 608, x8)

inst_103:
// rs1_val == 0xF0BB750D98000000 and rs2_val == 0xFB0323A1D576D415 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf0bb750d98000000;  op2val:0xfb0323a1d576d415
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf0bb750d98000000, 0xfb0323a1d576d415, x7, 616, x8)

inst_104:
// rs1_val == 0xC07F6E2CCC000000 and rs2_val == 0x1EA45CD69371A71F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc07f6e2ccc000000;  op2val:0x1ea45cd69371a71f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc07f6e2ccc000000, 0x1ea45cd69371a71f, x7, 624, x8)

inst_105:
// rs1_val == 0x0DB5ECD8C2000000 and rs2_val == 0x12F175FFAE3B16EC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdb5ecd8c2000000;  op2val:0x12f175ffae3b16ec
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdb5ecd8c2000000, 0x12f175ffae3b16ec, x7, 632, x8)

inst_106:
// rs1_val == 0x45D0DFAE45000000 and rs2_val == 0xC87A746319C16A0D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x45d0dfae45000000;  op2val:0xc87a746319c16a0d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x45d0dfae45000000, 0xc87a746319c16a0d, x7, 640, x8)

inst_107:
// rs1_val == 0x1C2F9FAB1C800000 and rs2_val == 0x552116DD2BA4B180 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1c2f9fab1c800000;  op2val:0x552116dd2ba4b180
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1c2f9fab1c800000, 0x552116dd2ba4b180, x7, 648, x8)

inst_108:
// rs1_val == 0x9FEED0B82CC00000 and rs2_val == 0xB490B6081DFC8352 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9feed0b82cc00000;  op2val:0xb490b6081dfc8352
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9feed0b82cc00000, 0xb490b6081dfc8352, x7, 656, x8)

inst_109:
// rs1_val == 0x50CA60DE7EE00000 and rs2_val == 0x3E37952D30BCAB0E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x50ca60de7ee00000;  op2val:0x3e37952d30bcab0e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x50ca60de7ee00000, 0x3e37952d30bcab0e, x7, 664, x8)

inst_110:
// rs1_val == 0x9C573581A8300000 and rs2_val == 0x5B7C709ACB175A5A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9c573581a8300000;  op2val:0x5b7c709acb175a5a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9c573581a8300000, 0x5b7c709acb175a5a, x7, 672, x8)

inst_111:
// rs1_val == 0x9F8EB3F2AFF80000 and rs2_val == 0x9466E4726B5F5241 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9f8eb3f2aff80000;  op2val:0x9466e4726b5f5241
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9f8eb3f2aff80000, 0x9466e4726b5f5241, x7, 680, x8)

inst_112:
// rs1_val == 0xA79BB18ACB240000 and rs2_val == 0xAEF9C00B8A64C1B9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa79bb18acb240000;  op2val:0xaef9c00b8a64c1b9
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa79bb18acb240000, 0xaef9c00b8a64c1b9, x7, 688, x8)

inst_113:
// rs1_val == 0x247AF3FBDEFA0000 and rs2_val == 0xE07405EB215663AB 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x247af3fbdefa0000;  op2val:0xe07405eb215663ab
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x247af3fbdefa0000, 0xe07405eb215663ab, x7, 696, x8)

inst_114:
// rs1_val == 0xACE4307BF3270000 and rs2_val == 0xA81AD477FB3675B8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xace4307bf3270000;  op2val:0xa81ad477fb3675b8
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xace4307bf3270000, 0xa81ad477fb3675b8, x7, 704, x8)

inst_115:
// rs1_val == 0xBC10CC5320B78000 and rs2_val == 0x4A5308CC3DFABC08 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xbc10cc5320b78000;  op2val:0x4a5308cc3dfabc08
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xbc10cc5320b78000, 0x4a5308cc3dfabc08, x7, 712, x8)

inst_116:
// rs1_val == 0xC8CEA309459AC000 and rs2_val == 0x71EACD0549A3E80E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc8cea309459ac000;  op2val:0x71eacd0549a3e80e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc8cea309459ac000, 0x71eacd0549a3e80e, x7, 720, x8)

inst_117:
// rs1_val == 0xFB36E9A573BDA000 and rs2_val == 0xB4E1357D4A84EB03 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb36e9a573bda000;  op2val:0xb4e1357d4a84eb03
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfb36e9a573bda000, 0xb4e1357d4a84eb03, x7, 728, x8)

inst_118:
// rs1_val == 0xF1922FE43C49F000 and rs2_val == 0x7D41E602EECE328B 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf1922fe43c49f000;  op2val:0x7d41e602eece328b
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf1922fe43c49f000, 0x7d41e602eece328b, x7, 736, x8)

inst_119:
// rs1_val == 0x85BE966D402B6800 and rs2_val == 0x1759EDC372AE2244 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x85be966d402b6800;  op2val:0x1759edc372ae2244
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x85be966d402b6800, 0x1759edc372ae2244, x7, 744, x8)

inst_120:
// rs1_val == 0xFA43B05F82A8F400 and rs2_val == 0x38C1962E9148624F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa43b05f82a8f400;  op2val:0x38c1962e9148624f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfa43b05f82a8f400, 0x38c1962e9148624f, x7, 752, x8)

inst_121:
// rs1_val == 0x4107CD9C2C9B7600 and rs2_val == 0xEA7E9D498C778EA6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4107cd9c2c9b7600;  op2val:0xea7e9d498c778ea6
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4107cd9c2c9b7600, 0xea7e9d498c778ea6, x7, 760, x8)

inst_122:
// rs1_val == 0x723104F77383C300 and rs2_val == 0x42AF9FC385776E9A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x723104f77383c300;  op2val:0x42af9fc385776e9a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x723104f77383c300, 0x42af9fc385776e9a, x7, 768, x8)

inst_123:
// rs1_val == 0x318B5CA879222B80 and rs2_val == 0xE9BB17BCA3F2C9BF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x318b5ca879222b80;  op2val:0xe9bb17bca3f2c9bf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x318b5ca879222b80, 0xe9bb17bca3f2c9bf, x7, 776, x8)

inst_124:
// rs1_val == 0xB8322CAEB5903F40 and rs2_val == 0x5A92118719C78DF4 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb8322caeb5903f40;  op2val:0x5a92118719c78df4
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb8322caeb5903f40, 0x5a92118719c78df4, x7, 784, x8)

inst_125:
// rs1_val == 0x1CA42D5F97A098A0 and rs2_val == 0x4F65D4D9259F4329 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ca42d5f97a098a0;  op2val:0x4f65d4d9259f4329
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1ca42d5f97a098a0, 0x4f65d4d9259f4329, x7, 792, x8)

inst_126:
// rs1_val == 0x846D424C17C627B0 and rs2_val == 0xCCA5A5A19E4D6E3C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x846d424c17c627b0;  op2val:0xcca5a5a19e4d6e3c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x846d424c17c627b0, 0xcca5a5a19e4d6e3c, x7, 800, x8)

inst_127:
// rs1_val == 0xD0121027BE0DEC48 and rs2_val == 0x4826867323A7711A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xd0121027be0dec48;  op2val:0x4826867323a7711a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xd0121027be0dec48, 0x4826867323a7711a, x7, 808, x8)

inst_128:
// rs1_val == 0xAC459ECD9EA70DE4 and rs2_val == 0xD4713D60C8A70639 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xac459ecd9ea70de4;  op2val:0xd4713d60c8a70639
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xac459ecd9ea70de4, 0xd4713d60c8a70639, x7, 816, x8)

inst_129:
// rs1_val == 0x8490BC7414BA5E6A and rs2_val == 0x82E2E662F728B4FA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x8490bc7414ba5e6a;  op2val:0x82e2e662f728b4fa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x8490bc7414ba5e6a, 0x82e2e662f728b4fa, x7, 824, x8)

inst_130:
// rs1_val == 0x629F6FBED82C07CF and rs2_val == 0xE3E70682C2094CAC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x629f6fbed82c07cf;  op2val:0xe3e70682c2094cac
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x629f6fbed82c07cf, 0xe3e70682c2094cac, x7, 832, x8)

inst_131:
// rs2_val == 0x259CFF81E5CE0CA6 and rs1_val == 0x4A82E06A2F16FB50 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4a82e06a2f16fb50;  op2val:0x259cff81e5ce0ca6
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4a82e06a2f16fb50, 0x259cff81e5ce0ca6, x7, 840, x8)

inst_132:
// rs2_val == 0x94B28B9D88819F41 and rs1_val == 0x280A07EE4EC985FF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x280a07ee4ec985ff;  op2val:0x94b28b9d88819f41
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x280a07ee4ec985ff, 0x94b28b9d88819f41, x7, 848, x8)

inst_133:
// rs2_val == 0x4AE9EE11F5FE0213 and rs1_val == 0x14AFE646FE3216BD 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x14afe646fe3216bd;  op2val:0x4ae9ee11f5fe0213
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x14afe646fe3216bd, 0x4ae9ee11f5fe0213, x7, 856, x8)

inst_134:
// rs2_val == 0x35475C5EF76DCE67 and rs1_val == 0x55C36C3D5CBBC080 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x55c36c3d5cbbc080;  op2val:0x35475c5ef76dce67
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x55c36c3d5cbbc080, 0x35475c5ef76dce67, x7, 864, x8)

inst_135:
// rs2_val == 0xF58C43CEB51D70CF and rs1_val == 0x215203C7421AA15E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x215203c7421aa15e;  op2val:0xf58c43ceb51d70cf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x215203c7421aa15e, 0xf58c43ceb51d70cf, x7, 872, x8)

inst_136:
// rs2_val == 0x743C7E9D2FDEB01F and rs1_val == 0x7A089CA81CC5A8A0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7a089ca81cc5a8a0;  op2val:0x743c7e9d2fdeb01f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7a089ca81cc5a8a0, 0x743c7e9d2fdeb01f, x7, 880, x8)

inst_137:
// rs2_val == 0x01D6D903BF7B68BF and rs1_val == 0xDBF2EED13B9CEA95 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdbf2eed13b9cea95;  op2val:0x1d6d903bf7b68bf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdbf2eed13b9cea95, 0x1d6d903bf7b68bf, x7, 888, x8)

inst_138:
// rs2_val == 0x346D2B7E00D3D17F and rs1_val == 0xE6A1A40BF031F4B9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xe6a1a40bf031f4b9;  op2val:0x346d2b7e00d3d17f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xe6a1a40bf031f4b9, 0x346d2b7e00d3d17f, x7, 896, x8)

inst_139:
// rs2_val == 0x590E83DA586F16FF and rs1_val == 0x24AEBA79E4B82987 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x24aeba79e4b82987;  op2val:0x590e83da586f16ff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x24aeba79e4b82987, 0x590e83da586f16ff, x7, 904, x8)

inst_140:
// rs2_val == 0x1F12A0E912011DFF and rs1_val == 0xB1182D235BF80676 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb1182d235bf80676;  op2val:0x1f12a0e912011dff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb1182d235bf80676, 0x1f12a0e912011dff, x7, 912, x8)

inst_141:
// rs2_val == 0xDD32E231EB5613FF and rs1_val == 0x141B1A1B40A978BF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x141b1a1b40a978bf;  op2val:0xdd32e231eb5613ff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x141b1a1b40a978bf, 0xdd32e231eb5613ff, x7, 920, x8)

inst_142:
// rs2_val == 0xAFB918C86E5BA7FF and rs1_val == 0x07B6E08E6AC1CA75 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7b6e08e6ac1ca75;  op2val:0xafb918c86e5ba7ff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7b6e08e6ac1ca75, 0xafb918c86e5ba7ff, x7, 928, x8)

inst_143:
// rs2_val == 0xF45DA406BBF9AFFF and rs1_val == 0xCA9571E407DC02B1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xca9571e407dc02b1;  op2val:0xf45da406bbf9afff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xca9571e407dc02b1, 0xf45da406bbf9afff, x7, 936, x8)

inst_144:
// rs2_val == 0x1965E435101B9FFF and rs1_val == 0xC618FC1E6A480542 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc618fc1e6a480542;  op2val:0x1965e435101b9fff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc618fc1e6a480542, 0x1965e435101b9fff, x7, 944, x8)

inst_145:
// rs2_val == 0x15831FEEEC41BFFF and rs1_val == 0x1AD1DAAAEF8D9FF0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ad1daaaef8d9ff0;  op2val:0x15831feeec41bfff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1ad1daaaef8d9ff0, 0x15831feeec41bfff, x7, 952, x8)

inst_146:
// rs2_val == 0x6D0C62C3254B7FFF and rs1_val == 0x90E639E1E44FC3A9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x90e639e1e44fc3a9;  op2val:0x6d0c62c3254b7fff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x90e639e1e44fc3a9, 0x6d0c62c3254b7fff, x7, 960, x8)

inst_147:
// rs2_val == 0xD1C3D1BCC6BEFFFF and rs1_val == 0xF20B575D4E28E674 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf20b575d4e28e674;  op2val:0xd1c3d1bcc6beffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf20b575d4e28e674, 0xd1c3d1bcc6beffff, x7, 968, x8)

inst_148:
// rs2_val == 0x06D2ED7CE6ADFFFF and rs1_val == 0x3ACAAF82374A6CC9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3acaaf82374a6cc9;  op2val:0x6d2ed7ce6adffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3acaaf82374a6cc9, 0x6d2ed7ce6adffff, x7, 976, x8)

inst_149:
// rs2_val == 0x30C32323C1B3FFFF and rs1_val == 0x7C7550F20A3C2C6F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7c7550f20a3c2c6f;  op2val:0x30c32323c1b3ffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7c7550f20a3c2c6f, 0x30c32323c1b3ffff, x7, 984, x8)

inst_150:
// rs2_val == 0xC838A14509C7FFFF and rs1_val == 0x71CFF814645BD776 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x71cff814645bd776;  op2val:0xc838a14509c7ffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x71cff814645bd776, 0xc838a14509c7ffff, x7, 992, x8)

inst_151:
// rs2_val == 0xDC45488D84CFFFFF and rs1_val == 0xFEEF71CBC915D113 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeef71cbc915d113;  op2val:0xdc45488d84cfffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfeef71cbc915d113, 0xdc45488d84cfffff, x7, 1000, x8)

inst_152:
// rs2_val == 0xBEEBB4EAEA9FFFFF and rs1_val == 0xCF6C9992FBBFF9E0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcf6c9992fbbff9e0;  op2val:0xbeebb4eaea9fffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcf6c9992fbbff9e0, 0xbeebb4eaea9fffff, x7, 1008, x8)

inst_153:
// rs2_val == 0xD960AF85C9BFFFFF and rs1_val == 0xCCA1A034633CBF79 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcca1a034633cbf79;  op2val:0xd960af85c9bfffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcca1a034633cbf79, 0xd960af85c9bfffff, x7, 1016, x8)

inst_154:
// rs2_val == 0xE19B58371C7FFFFF and rs1_val == 0x9F3DD894B6AF98B2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9f3dd894b6af98b2;  op2val:0xe19b58371c7fffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9f3dd894b6af98b2, 0xe19b58371c7fffff, x7, 1024, x8)

inst_155:
// rs2_val == 0xC88E03B662FFFFFF and rs1_val == 0xC707AEF9C6C3744C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc707aef9c6c3744c;  op2val:0xc88e03b662ffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc707aef9c6c3744c, 0xc88e03b662ffffff, x7, 1032, x8)

inst_156:
// rs2_val == 0x52EBDAC5A1FFFFFF and rs1_val == 0x58BF3B9EA6245B59 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x58bf3b9ea6245b59;  op2val:0x52ebdac5a1ffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x58bf3b9ea6245b59, 0x52ebdac5a1ffffff, x7, 1040, x8)

inst_157:
// rs2_val == 0x084FA81903FFFFFF and rs1_val == 0x9E0DF45B992A34A1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9e0df45b992a34a1;  op2val:0x84fa81903ffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9e0df45b992a34a1, 0x84fa81903ffffff, x7, 1048, x8)

inst_158:
// rs2_val == 0x19FAA06E07FFFFFF and rs1_val == 0xC734BB05788C31F6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc734bb05788c31f6;  op2val:0x19faa06e07ffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc734bb05788c31f6, 0x19faa06e07ffffff, x7, 1056, x8)

inst_159:
// rs2_val == 0x9C9D03F30FFFFFFF and rs1_val == 0x62FDA854775E0EC3 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x62fda854775e0ec3;  op2val:0x9c9d03f30fffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x62fda854775e0ec3, 0x9c9d03f30fffffff, x7, 1064, x8)

inst_160:
// rs2_val == 0x7DE8A2341FFFFFFF and rs1_val == 0x5A4F4145FC98C279 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5a4f4145fc98c279;  op2val:0x7de8a2341fffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5a4f4145fc98c279, 0x7de8a2341fffffff, x7, 1072, x8)

inst_161:
// rs2_val == 0xD476FE38BFFFFFFF and rs1_val == 0x7B38785B0932F5B6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7b38785b0932f5b6;  op2val:0xd476fe38bfffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7b38785b0932f5b6, 0xd476fe38bfffffff, x7, 1080, x8)

inst_162:
// rs2_val == 0xEF7E85EC7FFFFFFF and rs1_val == 0x3D2BF042209818D1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3d2bf042209818d1;  op2val:0xef7e85ec7fffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3d2bf042209818d1, 0xef7e85ec7fffffff, x7, 1088, x8)

inst_163:
// rs2_val == 0x7E56AC3CFFFFFFFF and rs1_val == 0x0FF030B86238D0A0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xff030b86238d0a0;  op2val:0x7e56ac3cffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xff030b86238d0a0, 0x7e56ac3cffffffff, x7, 1096, x8)

inst_164:
// rs2_val == 0x81C16E99FFFFFFFF and rs1_val == 0x4124405B91FCFE88 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4124405b91fcfe88;  op2val:0x81c16e99ffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4124405b91fcfe88, 0x81c16e99ffffffff, x7, 1104, x8)

inst_165:
// rs2_val == 0xE2A01333FFFFFFFF and rs1_val == 0xBDA17DA2000FC63D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xbda17da2000fc63d;  op2val:0xe2a01333ffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xbda17da2000fc63d, 0xe2a01333ffffffff, x7, 1112, x8)

inst_166:
// rs2_val == 0xF8F8F077FFFFFFFF and rs1_val == 0xCC4DA021DD620222 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcc4da021dd620222;  op2val:0xf8f8f077ffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcc4da021dd620222, 0xf8f8f077ffffffff, x7, 1120, x8)

inst_167:
// rs2_val == 0x89110AEFFFFFFFFF and rs1_val == 0x993EC8C6E6B106E2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x993ec8c6e6b106e2;  op2val:0x89110aefffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x993ec8c6e6b106e2, 0x89110aefffffffff, x7, 1128, x8)

inst_168:
// rs2_val == 0x6D265DDFFFFFFFFF and rs1_val == 0xC12EA9B8E7E13ED8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc12ea9b8e7e13ed8;  op2val:0x6d265ddfffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc12ea9b8e7e13ed8, 0x6d265ddfffffffff, x7, 1136, x8)

inst_169:
// rs2_val == 0xCB4D18BFFFFFFFFF and rs1_val == 0xFD938ADC99A2ECB1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd938adc99a2ecb1;  op2val:0xcb4d18bfffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfd938adc99a2ecb1, 0xcb4d18bfffffffff, x7, 1144, x8)

inst_170:
// rs2_val == 0x61D9FE7FFFFFFFFF and rs1_val == 0x92E94E89089B30A0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x92e94e89089b30a0;  op2val:0x61d9fe7fffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x92e94e89089b30a0, 0x61d9fe7fffffffff, x7, 1152, x8)

inst_171:
// rs2_val == 0xA7F518FFFFFFFFFF and rs1_val == 0xF7F60E7F75F2BC20 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f60e7f75f2bc20;  op2val:0xa7f518ffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf7f60e7f75f2bc20, 0xa7f518ffffffffff, x7, 1160, x8)

inst_172:
// rs2_val == 0xD80D69FFFFFFFFFF and rs1_val == 0xCCF719AB2922FBD8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xccf719ab2922fbd8;  op2val:0xd80d69ffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xccf719ab2922fbd8, 0xd80d69ffffffffff, x7, 1168, x8)

inst_173:
// rs2_val == 0x216813FFFFFFFFFF and rs1_val == 0x4CEA2DF00A66DC4E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4cea2df00a66dc4e;  op2val:0x216813ffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4cea2df00a66dc4e, 0x216813ffffffffff, x7, 1176, x8)

inst_174:
// rs2_val == 0x4B5CA7FFFFFFFFFF and rs1_val == 0x0A1727F7EA5F24B6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa1727f7ea5f24b6;  op2val:0x4b5ca7ffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa1727f7ea5f24b6, 0x4b5ca7ffffffffff, x7, 1184, x8)

inst_175:
// rs2_val == 0xC8BF2FFFFFFFFFFF and rs1_val == 0xD7A3283C27E969E2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xd7a3283c27e969e2;  op2val:0xc8bf2fffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xd7a3283c27e969e2, 0xc8bf2fffffffffff, x7, 1192, x8)

inst_176:
// rs2_val == 0x57189FFFFFFFFFFF and rs1_val == 0xDFDE228125FB5F3D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfde228125fb5f3d;  op2val:0x57189fffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdfde228125fb5f3d, 0x57189fffffffffff, x7, 1200, x8)

inst_177:
// rs2_val == 0xAB89BFFFFFFFFFFF and rs1_val == 0xEE6A8E2F9C19ED34 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xee6a8e2f9c19ed34;  op2val:0xab89bfffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xee6a8e2f9c19ed34, 0xab89bfffffffffff, x7, 1208, x8)

inst_178:
// rs2_val == 0x905C7FFFFFFFFFFF and rs1_val == 0xFF88EC827F99D273 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xff88ec827f99d273;  op2val:0x905c7fffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xff88ec827f99d273, 0x905c7fffffffffff, x7, 1216, x8)

inst_179:
// rs2_val == 0x60C6FFFFFFFFFFFF and rs1_val == 0xFBA52E5998A33736 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfba52e5998a33736;  op2val:0x60c6ffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfba52e5998a33736, 0x60c6ffffffffffff, x7, 1224, x8)

inst_180:
// rs2_val == 0xF2ADFFFFFFFFFFFF and rs1_val == 0x1AC902EE25777CF0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ac902ee25777cf0;  op2val:0xf2adffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1ac902ee25777cf0, 0xf2adffffffffffff, x7, 1232, x8)

inst_181:
// rs2_val == 0x41ABFFFFFFFFFFFF and rs1_val == 0xA41865BF350D278D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa41865bf350d278d;  op2val:0x41abffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa41865bf350d278d, 0x41abffffffffffff, x7, 1240, x8)

inst_182:
// rs2_val == 0x5BC7FFFFFFFFFFFF and rs1_val == 0x1E70E79933A1D1C2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1e70e79933a1d1c2;  op2val:0x5bc7ffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1e70e79933a1d1c2, 0x5bc7ffffffffffff, x7, 1248, x8)

inst_183:
// rs2_val == 0x156FFFFFFFFFFFFF and rs1_val == 0x2AA50F4EC6F00933 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x2aa50f4ec6f00933;  op2val:0x156fffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x2aa50f4ec6f00933, 0x156fffffffffffff, x7, 1256, x8)

inst_184:
// rs2_val == 0x191FFFFFFFFFFFFF and rs1_val == 0xADE6C5E9B6E355F6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xade6c5e9b6e355f6;  op2val:0x191fffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xade6c5e9b6e355f6, 0x191fffffffffffff, x7, 1264, x8)

inst_185:
// rs2_val == 0xCEBFFFFFFFFFFFFF and rs1_val == 0x0FA7EE0538974DF5 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa7ee0538974df5;  op2val:0xcebfffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfa7ee0538974df5, 0xcebfffffffffffff, x7, 1272, x8)

inst_186:
// rs2_val == 0x907FFFFFFFFFFFFF and rs1_val == 0xA38D8AFCFDD2ED7A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa38d8afcfdd2ed7a;  op2val:0x907fffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa38d8afcfdd2ed7a, 0x907fffffffffffff, x7, 1280, x8)

inst_187:
// rs2_val == 0x54FFFFFFFFFFFFFF and rs1_val == 0xEB70BA6527D99A23 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xeb70ba6527d99a23;  op2val:0x54ffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xeb70ba6527d99a23, 0x54ffffffffffffff, x7, 1288, x8)

inst_188:
// rs2_val == 0xB1FFFFFFFFFFFFFF and rs1_val == 0x6D316B4A7F6B8793 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6d316b4a7f6b8793;  op2val:0xb1ffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x6d316b4a7f6b8793, 0xb1ffffffffffffff, x7, 1296, x8)

inst_189:
// rs2_val == 0xD3FFFFFFFFFFFFFF and rs1_val == 0x1FD3C01757F98D1E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fd3c01757f98d1e;  op2val:0xd3ffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1fd3c01757f98d1e, 0xd3ffffffffffffff, x7, 1304, x8)

inst_190:
// rs2_val == 0x87FFFFFFFFFFFFFF and rs1_val == 0x7B2E1B82E89DC815 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7b2e1b82e89dc815;  op2val:0x87ffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7b2e1b82e89dc815, 0x87ffffffffffffff, x7, 1312, x8)

inst_191:
// rs2_val == 0x4FFFFFFFFFFFFFFF and rs1_val == 0x6A2B32004C9A0AE1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6a2b32004c9a0ae1;  op2val:0x4fffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x6a2b32004c9a0ae1, 0x4fffffffffffffff, x7, 1320, x8)

inst_192:
// rs2_val == 0x1FFFFFFFFFFFFFFF and rs1_val == 0x4D7BD307122411E6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4d7bd307122411e6;  op2val:0x1fffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4d7bd307122411e6, 0x1fffffffffffffff, x7, 1328, x8)

inst_193:
// rs2_val == 0xBFFFFFFFFFFFFFFF and rs1_val == 0xEF0A81ED3D5D60BC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xef0a81ed3d5d60bc;  op2val:0xbfffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xef0a81ed3d5d60bc, 0xbfffffffffffffff, x7, 1336, x8)

inst_194:
// rs2_val == 0x7FFFFFFFFFFFFFFF and rs1_val == 0x4B1CB8BD2130260C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4b1cb8bd2130260c;  op2val:0x7fffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4b1cb8bd2130260c, 0x7fffffffffffffff, x7, 1344, x8)

inst_195:
// rs2_val == 0xFFFFFFFFFFFFFFFF and rs1_val == 0x5C6460364A1EB1B7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5c6460364a1eb1b7;  op2val:0xffffffffffffffff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5c6460364a1eb1b7, 0xffffffffffffffff, x7, 1352, x8)

inst_196:
// rs1_val == 0xC787DDFB5697F17C and rs2_val == 0x09215F4F9EDB95F2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc787ddfb5697f17c;  op2val:0x9215f4f9edb95f2
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc787ddfb5697f17c, 0x9215f4f9edb95f2, x7, 1360, x8)

inst_197:
// rs1_val == 0x4578BAB326A97465 and rs2_val == 0xB7EF941C5E00EA6D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4578bab326a97465;  op2val:0xb7ef941c5e00ea6d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4578bab326a97465, 0xb7ef941c5e00ea6d, x7, 1368, x8)

inst_198:
// rs1_val == 0x964DDB776025F0AB and rs2_val == 0x0247145F4A814D53 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x964ddb776025f0ab;  op2val:0x247145f4a814d53
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x964ddb776025f0ab, 0x247145f4a814d53, x7, 1376, x8)

inst_199:
// rs1_val == 0xA4E695C9B65D1227 and rs2_val == 0x2DA44DA189B5B368 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa4e695c9b65d1227;  op2val:0x2da44da189b5b368
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa4e695c9b65d1227, 0x2da44da189b5b368, x7, 1384, x8)

inst_200:
// rs1_val == 0x5DECC06AF24DFDCF and rs2_val == 0xA7C5CB879B8B71A1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5decc06af24dfdcf;  op2val:0xa7c5cb879b8b71a1
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5decc06af24dfdcf, 0xa7c5cb879b8b71a1, x7, 1392, x8)

inst_201:
// rs1_val == 0xAE55CDFF34AB18DF and rs2_val == 0x8EF066D44279B14D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xae55cdff34ab18df;  op2val:0x8ef066d44279b14d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xae55cdff34ab18df, 0x8ef066d44279b14d, x7, 1400, x8)

inst_202:
// rs1_val == 0x41A93F90DC82153F and rs2_val == 0x0AD4041504C14982 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x41a93f90dc82153f;  op2val:0xad4041504c14982
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x41a93f90dc82153f, 0xad4041504c14982, x7, 1408, x8)

inst_203:
// rs1_val == 0x73F660D8E9F41C7F and rs2_val == 0xCAD6E514CCC14D51 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x73f660d8e9f41c7f;  op2val:0xcad6e514ccc14d51
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x73f660d8e9f41c7f, 0xcad6e514ccc14d51, x7, 1416, x8)

inst_204:
// rs1_val == 0xDA9BB01779C146FF and rs2_val == 0x0597AAB614D30DBC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xda9bb01779c146ff;  op2val:0x597aab614d30dbc
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xda9bb01779c146ff, 0x597aab614d30dbc, x7, 1424, x8)

inst_205:
// rs1_val == 0xB044284A47ACF1FF and rs2_val == 0x2EA60B99FA7FF8BF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb044284a47acf1ff;  op2val:0x2ea60b99fa7ff8bf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb044284a47acf1ff, 0x2ea60b99fa7ff8bf, x7, 1432, x8)

inst_206:
// rs1_val == 0xA636425C9BBD73FF and rs2_val == 0xDFA7C6ED32D1F81B 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa636425c9bbd73ff;  op2val:0xdfa7c6ed32d1f81b
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa636425c9bbd73ff, 0xdfa7c6ed32d1f81b, x7, 1440, x8)

inst_207:
// rs1_val == 0x36A98D7400DE57FF and rs2_val == 0x30C1FB6A19086515 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x36a98d7400de57ff;  op2val:0x30c1fb6a19086515
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x36a98d7400de57ff, 0x30c1fb6a19086515, x7, 1448, x8)

inst_208:
// rs1_val == 0xF3158C0C66DD6FFF and rs2_val == 0x6AE04D52ADB328CB 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf3158c0c66dd6fff;  op2val:0x6ae04d52adb328cb
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf3158c0c66dd6fff, 0x6ae04d52adb328cb, x7, 1456, x8)

inst_209:
// rs1_val == 0xFFDA03368C6E9FFF and rs2_val == 0xFCA055362169DF82 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xffda03368c6e9fff;  op2val:0xfca055362169df82
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xffda03368c6e9fff, 0xfca055362169df82, x7, 1464, x8)

inst_210:
// rs1_val == 0xCF1DA1100CC33FFF and rs2_val == 0x6A46721ACFFA6CDD 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcf1da1100cc33fff;  op2val:0x6a46721acffa6cdd
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcf1da1100cc33fff, 0x6a46721acffa6cdd, x7, 1472, x8)

inst_211:
// rs1_val == 0x53710F577E9C7FFF and rs2_val == 0xD675EBF74FE30C9A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x53710f577e9c7fff;  op2val:0xd675ebf74fe30c9a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x53710f577e9c7fff, 0xd675ebf74fe30c9a, x7, 1480, x8)

inst_212:
// rs1_val == 0x870F084C7244FFFF and rs2_val == 0xE245A4600004884C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x870f084c7244ffff;  op2val:0xe245a4600004884c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x870f084c7244ffff, 0xe245a4600004884c, x7, 1488, x8)

inst_213:
// rs1_val == 0x105ADA6B7201FFFF and rs2_val == 0xB3969057425CB200 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x105ada6b7201ffff;  op2val:0xb3969057425cb200
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x105ada6b7201ffff, 0xb3969057425cb200, x7, 1496, x8)

inst_214:
// rs1_val == 0xA985AB61C5ABFFFF and rs2_val == 0x0BF9C0EFB5816B74 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa985ab61c5abffff;  op2val:0xbf9c0efb5816b74
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa985ab61c5abffff, 0xbf9c0efb5816b74, x7, 1504, x8)

inst_215:
// rs1_val == 0xDF26F51766F7FFFF and rs2_val == 0x9145DE05B3AB1B2C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf26f51766f7ffff;  op2val:0x9145de05b3ab1b2c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdf26f51766f7ffff, 0x9145de05b3ab1b2c, x7, 1512, x8)

inst_216:
// rs1_val == 0xB5D97EF760EFFFFF and rs2_val == 0x6A1689ADDFE1B307 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb5d97ef760efffff;  op2val:0x6a1689addfe1b307
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb5d97ef760efffff, 0x6a1689addfe1b307, x7, 1520, x8)

inst_217:
// rs1_val == 0x3D4A5D5128DFFFFF and rs2_val == 0xA32C9B6F391CF046 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3d4a5d5128dfffff;  op2val:0xa32c9b6f391cf046
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3d4a5d5128dfffff, 0xa32c9b6f391cf046, x7, 1528, x8)

inst_218:
// rs1_val == 0xA69CFB85D43FFFFF and rs2_val == 0xB2D650AF313B32B7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa69cfb85d43fffff;  op2val:0xb2d650af313b32b7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa69cfb85d43fffff, 0xb2d650af313b32b7, x7, 1536, x8)

inst_219:
// rs1_val == 0x4F6FA985B77FFFFF and rs2_val == 0xBF9CC545635518F7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4f6fa985b77fffff;  op2val:0xbf9cc545635518f7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4f6fa985b77fffff, 0xbf9cc545635518f7, x7, 1544, x8)

inst_220:
// rs1_val == 0x49B25DED9CFFFFFF and rs2_val == 0x9EFEE464DA90F534 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x49b25ded9cffffff;  op2val:0x9efee464da90f534
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x49b25ded9cffffff, 0x9efee464da90f534, x7, 1552, x8)

inst_221:
// rs1_val == 0x47E7F59389FFFFFF and rs2_val == 0x7B59051BF40048D7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x47e7f59389ffffff;  op2val:0x7b59051bf40048d7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x47e7f59389ffffff, 0x7b59051bf40048d7, x7, 1560, x8)

inst_222:
// rs1_val == 0x143E2E04BBFFFFFF and rs2_val == 0xBD30291A55FEA08E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x143e2e04bbffffff;  op2val:0xbd30291a55fea08e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x143e2e04bbffffff, 0xbd30291a55fea08e, x7, 1568, x8)

inst_223:
// rs1_val == 0x5B6E4AE7A7FFFFFF and rs2_val == 0x032F06CAB0D9C2AA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5b6e4ae7a7ffffff;  op2val:0x32f06cab0d9c2aa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5b6e4ae7a7ffffff, 0x32f06cab0d9c2aa, x7, 1576, x8)

inst_224:
// rs1_val == 0x68EF8F5FAFFFFFFF and rs2_val == 0xEAE2025E82339E23 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x68ef8f5fafffffff;  op2val:0xeae2025e82339e23
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x68ef8f5fafffffff, 0xeae2025e82339e23, x7, 1584, x8)

inst_225:
// rs1_val == 0x878B9F6B5FFFFFFF and rs2_val == 0x0361524C2CC0F859 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x878b9f6b5fffffff;  op2val:0x361524c2cc0f859
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x878b9f6b5fffffff, 0x361524c2cc0f859, x7, 1592, x8)

inst_226:
// rs1_val == 0xE786AB373FFFFFFF and rs2_val == 0xD86DBF1128805C5D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xe786ab373fffffff;  op2val:0xd86dbf1128805c5d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xe786ab373fffffff, 0xd86dbf1128805c5d, x7, 1600, x8)

inst_227:
// rs1_val == 0x98B33C6E7FFFFFFF and rs2_val == 0x3308FB2E642AAD48 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x98b33c6e7fffffff;  op2val:0x3308fb2e642aad48
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x98b33c6e7fffffff, 0x3308fb2e642aad48, x7, 1608, x8)

inst_228:
// rs1_val == 0x2E295064FFFFFFFF and rs2_val == 0x80EE526E0FA07A3F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x2e295064ffffffff;  op2val:0x80ee526e0fa07a3f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x2e295064ffffffff, 0x80ee526e0fa07a3f, x7, 1616, x8)

inst_229:
// rs1_val == 0x126CBC8DFFFFFFFF and rs2_val == 0x4D125E7FA59CEC98 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x126cbc8dffffffff;  op2val:0x4d125e7fa59cec98
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x126cbc8dffffffff, 0x4d125e7fa59cec98, x7, 1624, x8)

inst_230:
// rs1_val == 0x19FBEB1BFFFFFFFF and rs2_val == 0x428A1C22D5FDB76A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x19fbeb1bffffffff;  op2val:0x428a1c22d5fdb76a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x19fbeb1bffffffff, 0x428a1c22d5fdb76a, x7, 1632, x8)

inst_231:
// rs1_val == 0xCCFDBA97FFFFFFFF and rs2_val == 0x8B53031D05D51433 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xccfdba97ffffffff;  op2val:0x8b53031d05d51433
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xccfdba97ffffffff, 0x8b53031d05d51433, x7, 1640, x8)

inst_232:
// rs1_val == 0x9B02524FFFFFFFFF and rs2_val == 0x7AAF0E891FB797FA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9b02524fffffffff;  op2val:0x7aaf0e891fb797fa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9b02524fffffffff, 0x7aaf0e891fb797fa, x7, 1648, x8)

inst_233:
// rs1_val == 0x5EC17D9FFFFFFFFF and rs2_val == 0xFB0323A1D576D415 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5ec17d9fffffffff;  op2val:0xfb0323a1d576d415
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5ec17d9fffffffff, 0xfb0323a1d576d415, x7, 1656, x8)

inst_234:
// rs1_val == 0xA28F5ABFFFFFFFFF and rs2_val == 0x1EA45CD69371A71F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa28f5abfffffffff;  op2val:0x1ea45cd69371a71f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa28f5abfffffffff, 0x1ea45cd69371a71f, x7, 1664, x8)

inst_235:
// rs1_val == 0xB29A8B7FFFFFFFFF and rs2_val == 0x12F175FFAE3B16EC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb29a8b7fffffffff;  op2val:0x12f175ffae3b16ec
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb29a8b7fffffffff, 0x12f175ffae3b16ec, x7, 1672, x8)

inst_236:
// rs1_val == 0x0FEBD8FFFFFFFFFF and rs2_val == 0xC87A746319C16A0D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfebd8ffffffffff;  op2val:0xc87a746319c16a0d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfebd8ffffffffff, 0xc87a746319c16a0d, x7, 1680, x8)

inst_237:
// rs1_val == 0xCB69C9FFFFFFFFFF and rs2_val == 0x552116DD2BA4B180 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcb69c9ffffffffff;  op2val:0x552116dd2ba4b180
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcb69c9ffffffffff, 0x552116dd2ba4b180, x7, 1688, x8)

inst_238:
// rs1_val == 0x4562BBFFFFFFFFFF and rs2_val == 0xB490B6081DFC8352 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4562bbffffffffff;  op2val:0xb490b6081dfc8352
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4562bbffffffffff, 0xb490b6081dfc8352, x7, 1696, x8)

inst_239:
// rs1_val == 0x9CDF57FFFFFFFFFF and rs2_val == 0x3E37952D30BCAB0E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9cdf57ffffffffff;  op2val:0x3e37952d30bcab0e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9cdf57ffffffffff, 0x3e37952d30bcab0e, x7, 1704, x8)

inst_240:
// rs1_val == 0x7E1EAFFFFFFFFFFF and rs2_val == 0x5B7C709ACB175A5A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7e1eafffffffffff;  op2val:0x5b7c709acb175a5a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7e1eafffffffffff, 0x5b7c709acb175a5a, x7, 1712, x8)

inst_241:
// rs1_val == 0xB48D5FFFFFFFFFFF and rs2_val == 0x9466E4726B5F5241 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb48d5fffffffffff;  op2val:0x9466e4726b5f5241
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb48d5fffffffffff, 0x9466e4726b5f5241, x7, 1720, x8)

inst_242:
// rs1_val == 0x09E43FFFFFFFFFFF and rs2_val == 0xAEF9C00B8A64C1B9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9e43fffffffffff;  op2val:0xaef9c00b8a64c1b9
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9e43fffffffffff, 0xaef9c00b8a64c1b9, x7, 1728, x8)

inst_243:
// rs1_val == 0x11AF7FFFFFFFFFFF and rs2_val == 0xE07405EB215663AB 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x11af7fffffffffff;  op2val:0xe07405eb215663ab
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x11af7fffffffffff, 0xe07405eb215663ab, x7, 1736, x8)

inst_244:
// rs1_val == 0xD24AFFFFFFFFFFFF and rs2_val == 0xA81AD477FB3675B8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xd24affffffffffff;  op2val:0xa81ad477fb3675b8
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xd24affffffffffff, 0xa81ad477fb3675b8, x7, 1744, x8)

inst_245:
// rs1_val == 0xCC45FFFFFFFFFFFF and rs2_val == 0x4A5308CC3DFABC08 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcc45ffffffffffff;  op2val:0x4a5308cc3dfabc08
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcc45ffffffffffff, 0x4a5308cc3dfabc08, x7, 1752, x8)

inst_246:
// rs1_val == 0x552BFFFFFFFFFFFF and rs2_val == 0x71EACD0549A3E80E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x552bffffffffffff;  op2val:0x71eacd0549a3e80e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x552bffffffffffff, 0x71eacd0549a3e80e, x7, 1760, x8)

inst_247:
// rs1_val == 0x8D17FFFFFFFFFFFF and rs2_val == 0xB4E1357D4A84EB03 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x8d17ffffffffffff;  op2val:0xb4e1357d4a84eb03
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x8d17ffffffffffff, 0xb4e1357d4a84eb03, x7, 1768, x8)

inst_248:
// rs1_val == 0x51EFFFFFFFFFFFFF and rs2_val == 0x7D41E602EECE328B 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x51efffffffffffff;  op2val:0x7d41e602eece328b
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x51efffffffffffff, 0x7d41e602eece328b, x7, 1776, x8)

inst_249:
// rs1_val == 0xF79FFFFFFFFFFFFF and rs2_val == 0x1759EDC372AE2244 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf79fffffffffffff;  op2val:0x1759edc372ae2244
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf79fffffffffffff, 0x1759edc372ae2244, x7, 1784, x8)

inst_250:
// rs1_val == 0xB83FFFFFFFFFFFFF and rs2_val == 0x38C1962E9148624F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb83fffffffffffff;  op2val:0x38c1962e9148624f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb83fffffffffffff, 0x38c1962e9148624f, x7, 1792, x8)

inst_251:
// rs1_val == 0xEB7FFFFFFFFFFFFF and rs2_val == 0xEA7E9D498C778EA6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xeb7fffffffffffff;  op2val:0xea7e9d498c778ea6
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xeb7fffffffffffff, 0xea7e9d498c778ea6, x7, 1800, x8)

inst_252:
// rs1_val == 0x8CFFFFFFFFFFFFFF and rs2_val == 0x42AF9FC385776E9A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x8cffffffffffffff;  op2val:0x42af9fc385776e9a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x8cffffffffffffff, 0x42af9fc385776e9a, x7, 1808, x8)

inst_253:
// rs1_val == 0x9DFFFFFFFFFFFFFF and rs2_val == 0xE9BB17BCA3F2C9BF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9dffffffffffffff;  op2val:0xe9bb17bca3f2c9bf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9dffffffffffffff, 0xe9bb17bca3f2c9bf, x7, 1816, x8)

inst_254:
// rs1_val == 0x13FFFFFFFFFFFFFF and rs2_val == 0x5A92118719C78DF4 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffffffffffffff;  op2val:0x5a92118719c78df4
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x13ffffffffffffff, 0x5a92118719c78df4, x7, 1824, x8)

inst_255:
// rs1_val == 0xE7FFFFFFFFFFFFFF and rs2_val == 0x4F65D4D9259F4329 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xe7ffffffffffffff;  op2val:0x4f65d4d9259f4329
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xe7ffffffffffffff, 0x4f65d4d9259f4329, x7, 1832, x8)

inst_256:
// rs1_val == 0x0FFFFFFFFFFFFFFF and rs2_val == 0xCCA5A5A19E4D6E3C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff;  op2val:0xcca5a5a19e4d6e3c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffff, 0xcca5a5a19e4d6e3c, x7, 1840, x8)

inst_257:
// rs1_val == 0x5FFFFFFFFFFFFFFF and rs2_val == 0x4826867323A7711A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fffffffffffffff;  op2val:0x4826867323a7711a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5fffffffffffffff, 0x4826867323a7711a, x7, 1848, x8)

inst_258:
// rs1_val == 0xBFFFFFFFFFFFFFFF and rs2_val == 0xD4713D60C8A70639 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0xd4713d60c8a70639
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffff, 0xd4713d60c8a70639, x7, 1856, x8)

inst_259:
// rs1_val == 0x7FFFFFFFFFFFFFFF and rs2_val == 0x82E2E662F728B4FA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0x82e2e662f728b4fa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0x82e2e662f728b4fa, x7, 1864, x8)

inst_260:
// rs1_val == 0xFFFFFFFFFFFFFFFF and rs2_val == 0xE3E70682C2094CAC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xe3e70682c2094cac
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xe3e70682c2094cac, x7, 1872, x8)

inst_261:
// rs2_val == 0xA59CFF81E5CE0CA7 and rs1_val == 0x4A82E06A2F16FB50 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4a82e06a2f16fb50;  op2val:0xa59cff81e5ce0ca7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4a82e06a2f16fb50, 0xa59cff81e5ce0ca7, x7, 1880, x8)

inst_262:
// rs2_val == 0x54B28B9D88819F43 and rs1_val == 0x280A07EE4EC985FF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x280a07ee4ec985ff;  op2val:0x54b28b9d88819f43
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x280a07ee4ec985ff, 0x54b28b9d88819f43, x7, 1888, x8)

inst_263:
// rs2_val == 0x2AE9EE11F5FE0214 and rs1_val == 0x14AFE646FE3216BD 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x14afe646fe3216bd;  op2val:0x2ae9ee11f5fe0214
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x14afe646fe3216bd, 0x2ae9ee11f5fe0214, x7, 1896, x8)

inst_264:
// rs2_val == 0x15475C5EF76DCE6F and rs1_val == 0x55C36C3D5CBBC080 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x55c36c3d5cbbc080;  op2val:0x15475c5ef76dce6f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x55c36c3d5cbbc080, 0x15475c5ef76dce6f, x7, 1904, x8)

inst_265:
// rs2_val == 0x0D8C43CEB51D70D9 and rs1_val == 0x215203C7421AA15E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x215203c7421aa15e;  op2val:0xd8c43ceb51d70d9
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x215203c7421aa15e, 0xd8c43ceb51d70d9, x7, 1912, x8)

inst_266:
// rs2_val == 0x043C7E9D2FDEB036 and rs1_val == 0x7A089CA81CC5A8A0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7a089ca81cc5a8a0;  op2val:0x43c7e9d2fdeb036
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7a089ca81cc5a8a0, 0x43c7e9d2fdeb036, x7, 1920, x8)

inst_267:
// rs2_val == 0x03D6D903BF7B68AF and rs1_val == 0xDBF2EED13B9CEA95 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdbf2eed13b9cea95;  op2val:0x3d6d903bf7b68af
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdbf2eed13b9cea95, 0x3d6d903bf7b68af, x7, 1928, x8)

inst_268:
// rs2_val == 0x016D2B7E00D3D1B0 and rs1_val == 0xE6A1A40BF031F4B9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xe6a1a40bf031f4b9;  op2val:0x16d2b7e00d3d1b0
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xe6a1a40bf031f4b9, 0x16d2b7e00d3d1b0, x7, 1936, x8)

inst_269:
// rs2_val == 0x008E83DA586F1722 and rs1_val == 0x24AEBA79E4B82987 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x24aeba79e4b82987;  op2val:0x8e83da586f1722
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x24aeba79e4b82987, 0x8e83da586f1722, x7, 1944, x8)

inst_270:
// rs2_val == 0x0052A0E912011CAB and rs1_val == 0xB1182D235BF80676 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xb1182d235bf80676;  op2val:0x52a0e912011cab
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xb1182d235bf80676, 0x52a0e912011cab, x7, 1952, x8)

inst_271:
// rs2_val == 0x0032E231EB56169A and rs1_val == 0x141B1A1B40A978BF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x141b1a1b40a978bf;  op2val:0x32e231eb56169a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x141b1a1b40a978bf, 0x32e231eb56169a, x7, 1960, x8)

inst_272:
// rs2_val == 0x001918C86E5BAC21 and rs1_val == 0x07B6E08E6AC1CA75 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7b6e08e6ac1ca75;  op2val:0x1918c86e5bac21
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7b6e08e6ac1ca75, 0x1918c86e5bac21, x7, 1968, x8)

inst_273:
// rs2_val == 0x000DA406BBF9BB02 and rs1_val == 0xCA9571E407DC02B1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xca9571e407dc02b1;  op2val:0xda406bbf9bb02
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xca9571e407dc02b1, 0xda406bbf9bb02, x7, 1976, x8)

inst_274:
// rs2_val == 0x0005E435101BB5FB and rs1_val == 0xC618FC1E6A480542 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc618fc1e6a480542;  op2val:0x5e435101bb5fb
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc618fc1e6a480542, 0x5e435101bb5fb, x7, 1984, x8)

inst_275:
// rs2_val == 0x00031FEEEC41E6F7 and rs1_val == 0x1AD1DAAAEF8D9FF0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ad1daaaef8d9ff0;  op2val:0x31feeec41e6f7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1ad1daaaef8d9ff0, 0x31feeec41e6f7, x7, 1992, x8)

inst_276:
// rs2_val == 0x000162C3254BF7AF and rs1_val == 0x90E639E1E44FC3A9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x90e639e1e44fc3a9;  op2val:0x162c3254bf7af
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x90e639e1e44fc3a9, 0x162c3254bf7af, x7, 2000, x8)

inst_277:
// rs2_val == 0x0000D1BCC6BE6433 and rs1_val == 0xF20B575D4E28E674 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf20b575d4e28e674;  op2val:0xd1bcc6be6433
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf20b575d4e28e674, 0xd1bcc6be6433, x7, 2008, x8)

inst_278:
// rs2_val == 0x00006D7CE6AC9D8B and rs1_val == 0x3ACAAF82374A6CC9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3acaaf82374a6cc9;  op2val:0x6d7ce6ac9d8b
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3acaaf82374a6cc9, 0x6d7ce6ac9d8b, x7, 2016, x8)

inst_279:
// rs2_val == 0x00002323C1B199C5 and rs1_val == 0x7C7550F20A3C2C6F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7c7550f20a3c2c6f;  op2val:0x2323c1b199c5
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7c7550f20a3c2c6f, 0x2323c1b199c5, x7, 2024, x8)

inst_280:
// rs2_val == 0x0000114509C67418 and rs1_val == 0x71CFF814645BD776 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x71cff814645bd776;  op2val:0x114509c67418
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x71cff814645bd776, 0x114509c67418, x7, 2032, x8)

inst_281:
// rs2_val == 0x0000088D84DDA9BA and rs1_val == 0xFEEF71CBC915D113 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeef71cbc915d113;  op2val:0x88d84dda9ba
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfeef71cbc915d113, 0x88d84dda9ba, x7, 2040, x8)
RVTEST_SIGBASE(x7,signature_x7_1)

inst_282:
// rs2_val == 0x000004EAEAB9221C and rs1_val == 0xCF6C9992FBBFF9E0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcf6c9992fbbff9e0;  op2val:0x4eaeab9221c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcf6c9992fbbff9e0, 0x4eaeab9221c, x7, 0, x8)
RVTEST_SIGBASE(x7,signature_x7_2)

inst_283:
// rs2_val == 0x00000385C9DF7E45 and rs1_val == 0xCCA1A034633CBF79 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcca1a034633cbf79;  op2val:0x385c9df7e45
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcca1a034633cbf79, 0x385c9df7e45, x7, 0, x8)

inst_284:
// rs2_val == 0x000001371C6A4B5F and rs1_val == 0x9F3DD894B6AF98B2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9f3dd894b6af98b2;  op2val:0x1371c6a4b5f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9f3dd894b6af98b2, 0x1371c6a4b5f, x7, 8, x8)

inst_285:
// rs2_val == 0x000000B662276CBD and rs1_val == 0xC707AEF9C6C3744C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc707aef9c6c3744c;  op2val:0xb662276cbd
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc707aef9c6c3744c, 0xb662276cbd, x7, 16, x8)

inst_286:
// rs2_val == 0x00000045A145789A and rs1_val == 0x58BF3B9EA6245B59 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x58bf3b9ea6245b59;  op2val:0x45a145789a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x58bf3b9ea6245b59, 0x45a145789a, x7, 24, x8)

inst_287:
// rs2_val == 0x00000039052DAAD4 and rs1_val == 0x9E0DF45B992A34A1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9e0df45b992a34a1;  op2val:0x39052daad4
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9e0df45b992a34a1, 0x39052daad4, x7, 32, x8)

inst_288:
// rs2_val == 0x0000001E0C0A5968 and rs1_val == 0xC734BB05788C31F6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc734bb05788c31f6;  op2val:0x1e0c0a5968
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc734bb05788c31f6, 0x1e0c0a5968, x7, 40, x8)

inst_289:
// rs2_val == 0x0000000B09018AEF and rs1_val == 0x62FDA854775E0EC3 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x62fda854775e0ec3;  op2val:0xb09018aef
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x62fda854775e0ec3, 0xb09018aef, x7, 48, x8)

inst_290:
// rs2_val == 0x000000042412579E and rs1_val == 0x5A4F4145FC98C279 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5a4f4145fc98c279;  op2val:0x42412579e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5a4f4145fc98c279, 0x42412579e, x7, 56, x8)

inst_291:
// rs2_val == 0x00000002BABD4746 and rs1_val == 0x7B38785B0932F5B6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7b38785b0932f5b6;  op2val:0x2babd4746
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7b38785b0932f5b6, 0x2babd4746, x7, 64, x8)

inst_292:
// rs2_val == 0x00000001A4179570 and rs1_val == 0x3D2BF042209818D1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3d2bf042209818d1;  op2val:0x1a4179570
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3d2bf042209818d1, 0x1a4179570, x7, 72, x8)

inst_293:
// rs2_val == 0x0000000090CC8712 and rs1_val == 0x0FF030B86238D0A0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xff030b86238d0a0;  op2val:0x90cc8712
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xff030b86238d0a0, 0x90cc8712, x7, 80, x8)

inst_294:
// rs2_val == 0x000000004D6CD783 and rs1_val == 0x4124405B91FCFE88 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4124405b91fcfe88;  op2val:0x4d6cd783
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4124405b91fcfe88, 0x4d6cd783, x7, 88, x8)

inst_295:
// rs2_val == 0x00000000283023AC and rs1_val == 0xBDA17DA2000FC63D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xbda17da2000fc63d;  op2val:0x283023ac
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xbda17da2000fc63d, 0x283023ac, x7, 96, x8)

inst_296:
// rs2_val == 0x000000001360DA6A and rs1_val == 0xCC4DA021DD620222 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xcc4da021dd620222;  op2val:0x1360da6a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xcc4da021dd620222, 0x1360da6a, x7, 104, x8)

inst_297:
// rs2_val == 0x000000000A276DDB and rs1_val == 0x993EC8C6E6B106E2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x993ec8c6e6b106e2;  op2val:0xa276ddb
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x993ec8c6e6b106e2, 0xa276ddb, x7, 112, x8)

inst_298:
// rs2_val == 0x0000000007391FBC and rs1_val == 0xC12EA9B8E7E13ED8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc12ea9b8e7e13ed8;  op2val:0x7391fbc
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc12ea9b8e7e13ed8, 0x7391fbc, x7, 120, x8)

inst_299:
// rs2_val == 0x0000000003B6DA36 and rs1_val == 0xFD938ADC99A2ECB1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd938adc99a2ecb1;  op2val:0x3b6da36
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfd938adc99a2ecb1, 0x3b6da36, x7, 128, x8)

inst_300:
// rs2_val == 0x000000000147A8F5 and rs1_val == 0x92E94E89089B30A0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x92e94e89089b30a0;  op2val:0x147a8f5
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x92e94e89089b30a0, 0x147a8f5, x7, 136, x8)

inst_301:
// rs2_val == 0x0000000000E2D440 and rs1_val == 0xF7F60E7F75F2BC20 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f60e7f75f2bc20;  op2val:0xe2d440
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf7f60e7f75f2bc20, 0xe2d440, x7, 144, x8)

inst_302:
// rs2_val == 0x0000000000472FD7 and rs1_val == 0xCCF719AB2922FBD8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xccf719ab2922fbd8;  op2val:0x472fd7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xccf719ab2922fbd8, 0x472fd7, x7, 152, x8)

inst_303:
// rs2_val == 0x00000000003F8A90 and rs1_val == 0x4CEA2DF00A66DC4E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4cea2df00a66dc4e;  op2val:0x3f8a90
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4cea2df00a66dc4e, 0x3f8a90, x7, 160, x8)

inst_304:
// rs2_val == 0x00000000001C178F and rs1_val == 0x0A1727F7EA5F24B6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa1727f7ea5f24b6;  op2val:0x1c178f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa1727f7ea5f24b6, 0x1c178f, x7, 168, x8)

inst_305:
// rs2_val == 0x00000000000B1F7B and rs1_val == 0xD7A3283C27E969E2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xd7a3283c27e969e2;  op2val:0xb1f7b
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xd7a3283c27e969e2, 0xb1f7b, x7, 176, x8)

inst_306:
// rs2_val == 0x0000000000040140 and rs1_val == 0xDFDE228125FB5F3D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfde228125fb5f3d;  op2val:0x40140
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdfde228125fb5f3d, 0x40140, x7, 184, x8)

inst_307:
// rs2_val == 0x0000000000039B3C and rs1_val == 0xEE6A8E2F9C19ED34 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xee6a8e2f9c19ed34;  op2val:0x39b3c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xee6a8e2f9c19ed34, 0x39b3c, x7, 192, x8)

inst_308:
// rs2_val == 0x000000000001ACBF and rs1_val == 0xFF88EC827F99D273 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xff88ec827f99d273;  op2val:0x1acbf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xff88ec827f99d273, 0x1acbf, x7, 200, x8)

inst_309:
// rs2_val == 0x000000000000BAC2 and rs1_val == 0xFBA52E5998A33736 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfba52e5998a33736;  op2val:0xbac2
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfba52e5998a33736, 0xbac2, x7, 208, x8)

inst_310:
// rs2_val == 0x0000000000004BA2 and rs1_val == 0x1AC902EE25777CF0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ac902ee25777cf0;  op2val:0x4ba2
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1ac902ee25777cf0, 0x4ba2, x7, 216, x8)

inst_311:
// rs2_val == 0x0000000000002994 and rs1_val == 0xA41865BF350D278D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa41865bf350d278d;  op2val:0x2994
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa41865bf350d278d, 0x2994, x7, 224, x8)

inst_312:
// rs2_val == 0x0000000000001EFF and rs1_val == 0x1E70E79933A1D1C2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1e70e79933a1d1c2;  op2val:0x1eff
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1e70e79933a1d1c2, 0x1eff, x7, 232, x8)

inst_313:
// rs2_val == 0x0000000000000936 and rs1_val == 0x2AA50F4EC6F00933 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x2aa50f4ec6f00933;  op2val:0x936
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x2aa50f4ec6f00933, 0x936, x7, 240, x8)

inst_314:
// rs2_val == 0x000000000000061D and rs1_val == 0xADE6C5E9B6E355F6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xade6c5e9b6e355f6;  op2val:0x61d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xade6c5e9b6e355f6, 0x61d, x7, 248, x8)

inst_315:
// rs2_val == 0x0000000000000296 and rs1_val == 0x0FA7EE0538974DF5 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa7ee0538974df5;  op2val:0x296
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfa7ee0538974df5, 0x296, x7, 256, x8)

inst_316:
// rs2_val == 0x00000000000001A1 and rs1_val == 0xA38D8AFCFDD2ED7A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa38d8afcfdd2ed7a;  op2val:0x1a1
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa38d8afcfdd2ed7a, 0x1a1, x7, 264, x8)

inst_317:
// rs2_val == 0x00000000000000DD and rs1_val == 0xEB70BA6527D99A23 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xeb70ba6527d99a23;  op2val:0xdd
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xeb70ba6527d99a23, 0xdd, x7, 272, x8)

inst_318:
// rs2_val == 0x0000000000000053 and rs1_val == 0x6D316B4A7F6B8793 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6d316b4a7f6b8793;  op2val:0x53
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x6d316b4a7f6b8793, 0x53, x7, 280, x8)

inst_319:
// rs2_val == 0x000000000000002A and rs1_val == 0x1FD3C01757F98D1E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fd3c01757f98d1e;  op2val:0x2a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1fd3c01757f98d1e, 0x2a, x7, 288, x8)

inst_320:
// rs2_val == 0x0000000000000014 and rs1_val == 0x7B2E1B82E89DC815 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7b2e1b82e89dc815;  op2val:0x14
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7b2e1b82e89dc815, 0x14, x7, 296, x8)

inst_321:
// rs2_val == 0x0000000000000008 and rs1_val == 0x6A2B32004C9A0AE1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6a2b32004c9a0ae1;  op2val:0x8
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x6a2b32004c9a0ae1, 0x8, x7, 304, x8)

inst_322:
// rs2_val == 0x0000000000000004 and rs1_val == 0x4D7BD307122411E6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4d7bd307122411e6;  op2val:0x4
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4d7bd307122411e6, 0x4, x7, 312, x8)

inst_323:
// rs2_val == 0x0000000000000003 and rs1_val == 0xEF0A81ED3D5D60BC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xef0a81ed3d5d60bc;  op2val:0x3
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xef0a81ed3d5d60bc, 0x3, x7, 320, x8)

inst_324:
// rs2_val == 0x0000000000000001 and rs1_val == 0x4B1CB8BD2130260C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4b1cb8bd2130260c;  op2val:0x1
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4b1cb8bd2130260c, 0x1, x7, 328, x8)

inst_325:
// rs2_val == 0x0000000000000000 and rs1_val == 0x5C6460364A1EB1B7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5c6460364a1eb1b7;  op2val:0x0
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5c6460364a1eb1b7, 0x0, x7, 336, x8)

inst_326:
// rs1_val == 0xC787DDFB5697F17D and rs2_val == 0x09215F4F9EDB95F2 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc787ddfb5697f17d;  op2val:0x9215f4f9edb95f2
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc787ddfb5697f17d, 0x9215f4f9edb95f2, x7, 344, x8)

inst_327:
// rs1_val == 0x4578BAB326A97466 and rs2_val == 0xB7EF941C5E00EA6D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4578bab326a97466;  op2val:0xb7ef941c5e00ea6d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4578bab326a97466, 0xb7ef941c5e00ea6d, x7, 352, x8)

inst_328:
// rs1_val == 0x364DDB776025F0AF and rs2_val == 0x0247145F4A814D53 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x364ddb776025f0af;  op2val:0x247145f4a814d53
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x364ddb776025f0af, 0x247145f4a814d53, x7, 360, x8)

inst_329:
// rs1_val == 0x14E695C9B65D1227 and rs2_val == 0x2DA44DA189B5B368 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x14e695c9b65d1227;  op2val:0x2da44da189b5b368
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x14e695c9b65d1227, 0x2da44da189b5b368, x7, 368, x8)

inst_330:
// rs1_val == 0x0DECC06AF24DFDD9 and rs2_val == 0xA7C5CB879B8B71A1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdecc06af24dfdd9;  op2val:0xa7c5cb879b8b71a1
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdecc06af24dfdd9, 0xa7c5cb879b8b71a1, x7, 376, x8)

inst_331:
// rs1_val == 0x0655CDFF34AB18FE and rs2_val == 0x8EF066D44279B14D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x655cdff34ab18fe;  op2val:0x8ef066d44279b14d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x655cdff34ab18fe, 0x8ef066d44279b14d, x7, 384, x8)

inst_332:
// rs1_val == 0x03A93F90DC821528 and rs2_val == 0x0AD4041504C14982 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3a93f90dc821528;  op2val:0xad4041504c14982
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3a93f90dc821528, 0xad4041504c14982, x7, 392, x8)

inst_333:
// rs1_val == 0x01F660D8E9F41CC1 and rs2_val == 0xCAD6E514CCC14D51 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1f660d8e9f41cc1;  op2val:0xcad6e514ccc14d51
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1f660d8e9f41cc1, 0xcad6e514ccc14d51, x7, 400, x8)

inst_334:
// rs1_val == 0x009BB01779C147C8 and rs2_val == 0x0597AAB614D30DBC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x9bb01779c147c8;  op2val:0x597aab614d30dbc
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x9bb01779c147c8, 0x597aab614d30dbc, x7, 408, x8)

inst_335:
// rs1_val == 0x0044284A47ACF2F7 and rs2_val == 0x2EA60B99FA7FF8BF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x44284a47acf2f7;  op2val:0x2ea60b99fa7ff8bf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x44284a47acf2f7, 0x2ea60b99fa7ff8bf, x7, 416, x8)

inst_336:
// rs1_val == 0x0036425C9BBD750E and rs2_val == 0xDFA7C6ED32D1F81B 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x36425c9bbd750e;  op2val:0xdfa7c6ed32d1f81b
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x36425c9bbd750e, 0xdfa7c6ed32d1f81b, x7, 424, x8)

inst_337:
// rs1_val == 0x00198D7400DE59F6 and rs2_val == 0x30C1FB6A19086515 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x198d7400de59f6;  op2val:0x30c1fb6a19086515
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x198d7400de59f6, 0x30c1fb6a19086515, x7, 432, x8)

inst_338:
// rs1_val == 0x000D8C0C66DD7795 and rs2_val == 0x6AE04D52ADB328CB 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xd8c0c66dd7795;  op2val:0x6ae04d52adb328cb
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xd8c0c66dd7795, 0x6ae04d52adb328cb, x7, 440, x8)

inst_339:
// rs1_val == 0x000603368C6E9038 and rs2_val == 0xFCA055362169DF82 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x603368c6e9038;  op2val:0xfca055362169df82
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x603368c6e9038, 0xfca055362169df82, x7, 448, x8)

inst_340:
// rs1_val == 0x0003A1100CC36D8D and rs2_val == 0x6A46721ACFFA6CDD 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3a1100cc36d8d;  op2val:0x6a46721acffa6cdd
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3a1100cc36d8d, 0x6a46721acffa6cdd, x7, 456, x8)

inst_341:
// rs1_val == 0x00010F577E9CF850 and rs2_val == 0xD675EBF74FE30C9A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x10f577e9cf850;  op2val:0xd675ebf74fe30c9a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x10f577e9cf850, 0xd675ebf74fe30c9a, x7, 464, x8)

inst_342:
// rs1_val == 0x0000884C7244F537 and rs2_val == 0xE245A4600004884C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x884c7244f537;  op2val:0xe245a4600004884c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x884c7244f537, 0xe245a4600004884c, x7, 472, x8)

inst_343:
// rs1_val == 0x00005A6B720299E4 and rs2_val == 0xB3969057425CB200 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5a6b720299e4;  op2val:0xb3969057425cb200
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5a6b720299e4, 0xb3969057425cb200, x7, 480, x8)

inst_344:
// rs1_val == 0x00002B61C5ADF682 and rs2_val == 0x0BF9C0EFB5816B74 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x2b61c5adf682;  op2val:0xbf9c0efb5816b74
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x2b61c5adf682, 0xbf9c0efb5816b74, x7, 488, x8)

inst_345:
// rs1_val == 0x0000151766FAF98A and rs2_val == 0x9145DE05B3AB1B2C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x151766faf98a;  op2val:0x9145de05b3ab1b2c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x151766faf98a, 0x9145de05b3ab1b2c, x7, 496, x8)

inst_346:
// rs1_val == 0x00000EF760EF1472 and rs2_val == 0x6A1689ADDFE1B307 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xef760ef1472;  op2val:0x6a1689addfe1b307
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xef760ef1472, 0x6a1689addfe1b307, x7, 504, x8)

inst_347:
// rs1_val == 0x0000055128FAFD05 and rs2_val == 0xA32C9B6F391CF046 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x55128fafd05;  op2val:0xa32c9b6f391cf046
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x55128fafd05, 0xa32c9b6f391cf046, x7, 512, x8)

inst_348:
// rs1_val == 0x00000385D432F8DC and rs2_val == 0xB2D650AF313B32B7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x385d432f8dc;  op2val:0xb2d650af313b32b7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x385d432f8dc, 0xb2d650af313b32b7, x7, 520, x8)

inst_349:
// rs1_val == 0x00000185B732D470 and rs2_val == 0xBF9CC545635518F7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x185b732d470;  op2val:0xbf9cc545635518f7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x185b732d470, 0xbf9cc545635518f7, x7, 528, x8)

inst_350:
// rs1_val == 0x000000ED9C31D9B3 and rs2_val == 0x9EFEE464DA90F534 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xed9c31d9b3;  op2val:0x9efee464da90f534
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xed9c31d9b3, 0x9efee464da90f534, x7, 536, x8)

inst_351:
// rs1_val == 0x000000538B5885CB and rs2_val == 0x7B59051BF40048D7 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x538b5885cb;  op2val:0x7b59051bf40048d7
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x538b5885cb, 0x7b59051bf40048d7, x7, 544, x8)

inst_352:
// rs1_val == 0x00000024BDD7D19C and rs2_val == 0xBD30291A55FEA08E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x24bdd7d19c;  op2val:0xbd30291a55fea08e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x24bdd7d19c, 0xbd30291a55fea08e, x7, 552, x8)

inst_353:
// rs1_val == 0x00000017A6208144 and rs2_val == 0x032F06CAB0D9C2AA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x17a6208144;  op2val:0x32f06cab0d9c2aa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x17a6208144, 0x32f06cab0d9c2aa, x7, 560, x8)

inst_354:
// rs1_val == 0x0000000FAE68690B and rs2_val == 0xEAE2025E82339E23 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfae68690b;  op2val:0xeae2025e82339e23
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xfae68690b, 0xeae2025e82339e23, x7, 568, x8)

inst_355:
// rs1_val == 0x0000000757A1CB72 and rs2_val == 0x0361524C2CC0F859 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x757a1cb72;  op2val:0x361524c2cc0f859
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x757a1cb72, 0x361524c2cc0f859, x7, 576, x8)

inst_356:
// rs1_val == 0x000000035BCA47BF and rs2_val == 0xD86DBF1128805C5D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x35bca47bf;  op2val:0xd86dbf1128805c5d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x35bca47bf, 0xd86dbf1128805c5d, x7, 584, x8)

inst_357:
// rs1_val == 0x000000010A14B90B and rs2_val == 0x3308FB2E642AAD48 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x10a14b90b;  op2val:0x3308fb2e642aad48
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x10a14b90b, 0x3308fb2e642aad48, x7, 592, x8)

inst_358:
// rs1_val == 0x00000000EFA231EA and rs2_val == 0x80EE526E0FA07A3F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xefa231ea;  op2val:0x80ee526e0fa07a3f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xefa231ea, 0x80ee526e0fa07a3f, x7, 600, x8)

inst_359:
// rs1_val == 0x000000007888447A and rs2_val == 0x4D125E7FA59CEC98 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7888447a;  op2val:0x4d125e7fa59cec98
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7888447a, 0x4d125e7fa59cec98, x7, 608, x8)

inst_360:
// rs1_val == 0x000000003EDFA3DB and rs2_val == 0x428A1C22D5FDB76A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3edfa3db;  op2val:0x428a1c22d5fdb76a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3edfa3db, 0x428a1c22d5fdb76a, x7, 616, x8)

inst_361:
// rs1_val == 0x000000001A26D852 and rs2_val == 0x8B53031D05D51433 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1a26d852;  op2val:0x8b53031d05d51433
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1a26d852, 0x8b53031d05d51433, x7, 624, x8)

inst_362:
// rs1_val == 0x000000000950FD14 and rs2_val == 0x7AAF0E891FB797FA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x950fd14;  op2val:0x7aaf0e891fb797fa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x950fd14, 0x7aaf0e891fb797fa, x7, 632, x8)

inst_363:
// rs1_val == 0x00000000076EA1B2 and rs2_val == 0xFB0323A1D576D415 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x76ea1b2;  op2val:0xfb0323a1d576d415
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x76ea1b2, 0xfb0323a1d576d415, x7, 640, x8)

inst_364:
// rs1_val == 0x0000000003DB8B33 and rs2_val == 0x1EA45CD69371A71F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3db8b33;  op2val:0x1ea45cd69371a71f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3db8b33, 0x1ea45cd69371a71f, x7, 648, x8)

inst_365:
// rs1_val == 0x0000000001F66C60 and rs2_val == 0x12F175FFAE3B16EC 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1f66c60;  op2val:0x12f175ffae3b16ec
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1f66c60, 0x12f175ffae3b16ec, x7, 656, x8)

inst_366:
// rs1_val == 0x0000000000DFAE44 and rs2_val == 0xC87A746319C16A0D 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfae44;  op2val:0xc87a746319c16a0d
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xdfae44, 0xc87a746319c16a0d, x7, 664, x8)

inst_367:
// rs1_val == 0x00000000007F5639 and rs2_val == 0x552116DD2BA4B180 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f5639;  op2val:0x552116dd2ba4b180
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x7f5639, 0x552116dd2ba4b180, x7, 672, x8)

inst_368:
// rs1_val == 0x000000000022E0B3 and rs2_val == 0xB490B6081DFC8352 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x22e0b3;  op2val:0xb490b6081dfc8352
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x22e0b3, 0xb490b6081dfc8352, x7, 680, x8)

inst_369:
// rs1_val == 0x000000000016F3F6 and rs2_val == 0x3E37952D30BCAB0E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x16f3f6;  op2val:0x3e37952d30bcab0e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x16f3f6, 0x3e37952d30bcab0e, x7, 688, x8)

inst_370:
// rs1_val == 0x0000000000081A82 and rs2_val == 0x5B7C709ACB175A5A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x81a82;  op2val:0x5b7c709acb175a5a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x81a82, 0x5b7c709acb175a5a, x7, 696, x8)

inst_371:
// rs1_val == 0x00000000000655FE and rs2_val == 0x9466E4726B5F5241 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x655fe;  op2val:0x9466e4726b5f5241
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x655fe, 0x9466e4726b5f5241, x7, 704, x8)

inst_372:
// rs1_val == 0x000000000002B2C9 and rs2_val == 0xAEF9C00B8A64C1B9 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x2b2c9;  op2val:0xaef9c00b8a64c1b9
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x2b2c9, 0xaef9c00b8a64c1b9, x7, 712, x8)

inst_373:
// rs1_val == 0x000000000001EF7D and rs2_val == 0xE07405EB215663AB 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ef7d;  op2val:0xe07405eb215663ab
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1ef7d, 0xe07405eb215663ab, x7, 720, x8)

inst_374:
// rs1_val == 0x000000000000F327 and rs2_val == 0xA81AD477FB3675B8 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf327;  op2val:0xa81ad477fb3675b8
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xf327, 0xa81ad477fb3675b8, x7, 728, x8)

inst_375:
// rs1_val == 0x000000000000416E and rs2_val == 0x4A5308CC3DFABC08 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x416e;  op2val:0x4a5308cc3dfabc08
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x416e, 0x4a5308cc3dfabc08, x7, 736, x8)

inst_376:
// rs1_val == 0x000000000000366B and rs2_val == 0x71EACD0549A3E80E 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x366b;  op2val:0x71eacd0549a3e80e
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x366b, 0x71eacd0549a3e80e, x7, 744, x8)

inst_377:
// rs1_val == 0x0000000000001DEC and rs2_val == 0xB4E1357D4A84EB03 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1dec;  op2val:0xb4e1357d4a84eb03
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1dec, 0xb4e1357d4a84eb03, x7, 752, x8)

inst_378:
// rs1_val == 0x0000000000000C9F and rs2_val == 0x7D41E602EECE328B 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc9f;  op2val:0x7d41e602eece328b
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc9f, 0x7d41e602eece328b, x7, 760, x8)

inst_379:
// rs1_val == 0x000000000000056D and rs2_val == 0x1759EDC372AE2244 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x56d;  op2val:0x1759edc372ae2244
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x56d, 0x1759edc372ae2244, x7, 768, x8)

inst_380:
// rs1_val == 0x000000000000023D and rs2_val == 0x38C1962E9148624F 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x23d;  op2val:0x38c1962e9148624f
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x23d, 0x38c1962e9148624f, x7, 776, x8)

inst_381:
// rs1_val == 0x00000000000001BB and rs2_val == 0xEA7E9D498C778EA6 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1bb;  op2val:0xea7e9d498c778ea6
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1bb, 0xea7e9d498c778ea6, x7, 784, x8)

inst_382:
// rs1_val == 0x00000000000000C2 and rs2_val == 0x42AF9FC385776E9A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc2;  op2val:0x42af9fc385776e9a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xc2, 0x42af9fc385776e9a, x7, 792, x8)

inst_383:
// rs1_val == 0x0000000000000056 and rs2_val == 0xE9BB17BCA3F2C9BF 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x56;  op2val:0xe9bb17bca3f2c9bf
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x56, 0xe9bb17bca3f2c9bf, x7, 800, x8)

inst_384:
// rs1_val == 0x000000000000003C and rs2_val == 0x5A92118719C78DF4 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3c;  op2val:0x5a92118719c78df4
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3c, 0x5a92118719c78df4, x7, 808, x8)

inst_385:
// rs1_val == 0x0000000000000014 and rs2_val == 0x4F65D4D9259F4329 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x14;  op2val:0x4f65d4d9259f4329
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x14, 0x4f65d4d9259f4329, x7, 816, x8)

inst_386:
// rs1_val == 0x000000000000000A and rs2_val == 0xCCA5A5A19E4D6E3C 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xa;  op2val:0xcca5a5a19e4d6e3c
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xa, 0xcca5a5a19e4d6e3c, x7, 824, x8)

inst_387:
// rs1_val == 0x0000000000000004 and rs2_val == 0x4826867323A7711A 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x4826867323a7711a
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x4, 0x4826867323a7711a, x7, 832, x8)

inst_388:
// rs1_val == 0x0000000000000003 and rs2_val == 0xD4713D60C8A70639 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xd4713d60c8a70639
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3, 0xd4713d60c8a70639, x7, 840, x8)

inst_389:
// rs1_val == 0x0000000000000001 and rs2_val == 0x82E2E662F728B4FA 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x82e2e662f728b4fa
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x1, 0x82e2e662f728b4fa, x7, 848, x8)

inst_390:
// rs2_val == 0x4000000000000000 and rs1_val == 0x14AFE646FE3216BD 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x14afe646fe3216bd;  op2val:0x4000000000000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x14afe646fe3216bd, 0x4000000000000000, x7, 856, x8)

inst_391:
// rs2_val == 0xE000000000000000 and rs1_val == 0x55C36C3D5CBBC080 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x55c36c3d5cbbc080;  op2val:0xe000000000000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x55c36c3d5cbbc080, 0xe000000000000000, x7, 864, x8)

inst_392:
// rs2_val == 0x2092BCF800000000 and rs1_val == 0x5A4F4145FC98C279 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5a4f4145fc98c279;  op2val:0x2092bcf800000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x5a4f4145fc98c279, 0x2092bcf800000000, x7, 872, x8)

inst_393:
// rs2_val == 0x482F2AE200000000 and rs1_val == 0x3D2BF042209818D1 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3d2bf042209818d1;  op2val:0x482f2ae200000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0x3d2bf042209818d1, 0x482f2ae200000000, x7, 880, x8)

inst_394:
// rs2_val == 0x10CC871300000000 and rs1_val == 0x0FF030B86238D0A0 
// opcode: xperm8 ; op1:x30; op2:x29; dest:x31; op1val:0xff030b86238d0a0;  op2val:0x10cc871300000000
TEST_RR_OP(xperm8, x31, x30, x29, 0x0000000000000000, 0xff030b86238d0a0, 0x10cc871300000000, x7, 888, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x7_2:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
