
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Mon May 23 11:25:33 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/trials/bcrypto/32/dataset.cgf \
//                  --cgf /home/anku/trials/bcrypto/32/rv32i_k.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the orn instruction of the RISC-V RV32B,RV32K,RV32Zbb,RV32Zbkb,RV32Zkn,RV32Zks extension for the orn covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IB,RV32IK,RV32IZbb,RV32IZbkb,RV32IZkn,RV32IZks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)

RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zbkb.*);def TEST_CASE_1=True;",orn)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x31, rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 1, rs1_val == (2**(xlen)-1), rs1_val > 0 and rs2_val > 0, rs1_val==4294967295 and rs2_val==1
// opcode: orn ; op1:x30; op2:x30; dest:x31; op1val:0xffffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x30, 0x00000000, 0xffffffff, 0xffffffff, x1, 0, x2)

inst_1:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs2_val == 2147483647, 
// opcode: orn ; op1:x29; op2:x29; dest:x29; op1val:0xffffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x29, x29, x29, 0x00000000, 0xffffffff, 0xffffffff, x1, 4, x2)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x28, rd==x30, rs2_val == 3221225471, 
// opcode: orn ; op1:x31; op2:x28; dest:x30; op1val:0xffffffff;  op2val:0xbfffffff
TEST_RR_OP(orn, x30, x31, x28, 0x00000000, 0xffffffff, 0xbfffffff, x1, 8, x2)

inst_3:
// rs2 == rd != rs1, rs1==x28, rs2==x27, rd==x27, rs2_val == 3758096383, 
// opcode: orn ; op1:x28; op2:x27; dest:x27; op1val:0xffffffff;  op2val:0xdfffffff
TEST_RR_OP(orn, x27, x28, x27, 0x00000000, 0xffffffff, 0xdfffffff, x1, 12, x2)

inst_4:
// rs1 == rd != rs2, rs1==x26, rs2==x31, rd==x26, rs2_val == 4026531839, 
// opcode: orn ; op1:x26; op2:x31; dest:x26; op1val:0xffffffff;  op2val:0xefffffff
TEST_RR_OP(orn, x26, x26, x31, 0x00000000, 0xffffffff, 0xefffffff, x1, 16, x2)

inst_5:
// rs1==x27, rs2==x26, rd==x28, rs2_val == 4160749567, 
// opcode: orn ; op1:x27; op2:x26; dest:x28; op1val:0xffffffff;  op2val:0xf7ffffff
TEST_RR_OP(orn, x28, x27, x26, 0x00000000, 0xffffffff, 0xf7ffffff, x1, 20, x2)

inst_6:
// rs1==x24, rs2==x23, rd==x25, rs2_val == 4227858431, 
// opcode: orn ; op1:x24; op2:x23; dest:x25; op1val:0xffffffff;  op2val:0xfbffffff
TEST_RR_OP(orn, x25, x24, x23, 0x00000000, 0xffffffff, 0xfbffffff, x1, 24, x2)

inst_7:
// rs1==x23, rs2==x25, rd==x24, rs2_val == 4261412863, 
// opcode: orn ; op1:x23; op2:x25; dest:x24; op1val:0xffffffff;  op2val:0xfdffffff
TEST_RR_OP(orn, x24, x23, x25, 0x00000000, 0xffffffff, 0xfdffffff, x1, 28, x2)

inst_8:
// rs1==x25, rs2==x24, rd==x23, rs2_val == 4278190079, 
// opcode: orn ; op1:x25; op2:x24; dest:x23; op1val:0xffffffff;  op2val:0xfeffffff
TEST_RR_OP(orn, x23, x25, x24, 0x00000000, 0xffffffff, 0xfeffffff, x1, 32, x2)

inst_9:
// rs1==x21, rs2==x20, rd==x22, rs2_val == 4286578687, 
// opcode: orn ; op1:x21; op2:x20; dest:x22; op1val:0xffffffff;  op2val:0xff7fffff
TEST_RR_OP(orn, x22, x21, x20, 0x00000000, 0xffffffff, 0xff7fffff, x1, 36, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, rs2_val == 4290772991, 
// opcode: orn ; op1:x20; op2:x22; dest:x21; op1val:0xffffffff;  op2val:0xffbfffff
TEST_RR_OP(orn, x21, x20, x22, 0x00000000, 0xffffffff, 0xffbfffff, x1, 40, x2)

inst_11:
// rs1==x22, rs2==x21, rd==x20, rs2_val == 4292870143, 
// opcode: orn ; op1:x22; op2:x21; dest:x20; op1val:0xffffffff;  op2val:0xffdfffff
TEST_RR_OP(orn, x20, x22, x21, 0x00000000, 0xffffffff, 0xffdfffff, x1, 44, x2)

inst_12:
// rs1==x18, rs2==x17, rd==x19, rs2_val == 4293918719, 
// opcode: orn ; op1:x18; op2:x17; dest:x19; op1val:0xffffffff;  op2val:0xffefffff
TEST_RR_OP(orn, x19, x18, x17, 0x00000000, 0xffffffff, 0xffefffff, x1, 48, x2)

inst_13:
// rs1==x17, rs2==x19, rd==x18, rs2_val == 4294443007, 
// opcode: orn ; op1:x17; op2:x19; dest:x18; op1val:0xffffffff;  op2val:0xfff7ffff
TEST_RR_OP(orn, x18, x17, x19, 0x00000000, 0xffffffff, 0xfff7ffff, x1, 52, x2)

inst_14:
// rs1==x19, rs2==x18, rd==x17, rs2_val == 4294705151, 
// opcode: orn ; op1:x19; op2:x18; dest:x17; op1val:0xffffffff;  op2val:0xfffbffff
TEST_RR_OP(orn, x17, x19, x18, 0x00000000, 0xffffffff, 0xfffbffff, x1, 56, x2)

inst_15:
// rs1==x15, rs2==x14, rd==x16, rs2_val == 4294836223, 
// opcode: orn ; op1:x15; op2:x14; dest:x16; op1val:0xffffffff;  op2val:0xfffdffff
TEST_RR_OP(orn, x16, x15, x14, 0x00000000, 0xffffffff, 0xfffdffff, x1, 60, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, rs2_val == 4294901759, 
// opcode: orn ; op1:x14; op2:x16; dest:x15; op1val:0xffffffff;  op2val:0xfffeffff
TEST_RR_OP(orn, x15, x14, x16, 0x00000000, 0xffffffff, 0xfffeffff, x1, 64, x2)

inst_17:
// rs1==x16, rs2==x15, rd==x14, rs2_val == 4294934527, 
// opcode: orn ; op1:x16; op2:x15; dest:x14; op1val:0xffffffff;  op2val:0xffff7fff
TEST_RR_OP(orn, x14, x16, x15, 0x00000000, 0xffffffff, 0xffff7fff, x1, 68, x2)

inst_18:
// rs1==x12, rs2==x11, rd==x13, rs2_val == 4294950911, 
// opcode: orn ; op1:x12; op2:x11; dest:x13; op1val:0xffffffff;  op2val:0xffffbfff
TEST_RR_OP(orn, x13, x12, x11, 0x00000000, 0xffffffff, 0xffffbfff, x1, 72, x2)

inst_19:
// rs1==x11, rs2==x13, rd==x12, rs2_val == 4294959103, 
// opcode: orn ; op1:x11; op2:x13; dest:x12; op1val:0xffffffff;  op2val:0xffffdfff
TEST_RR_OP(orn, x12, x11, x13, 0x00000000, 0xffffffff, 0xffffdfff, x1, 76, x2)

inst_20:
// rs1==x13, rs2==x12, rd==x11, rs2_val == 4294963199, 
// opcode: orn ; op1:x13; op2:x12; dest:x11; op1val:0xffffffff;  op2val:0xffffefff
TEST_RR_OP(orn, x11, x13, x12, 0x00000000, 0xffffffff, 0xffffefff, x1, 80, x2)

inst_21:
// rs1==x9, rs2==x8, rd==x10, rs2_val == 4294965247, 
// opcode: orn ; op1:x9; op2:x8; dest:x10; op1val:0xffffffff;  op2val:0xfffff7ff
TEST_RR_OP(orn, x10, x9, x8, 0x00000000, 0xffffffff, 0xfffff7ff, x1, 84, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, rs2_val == 4294966271, 
// opcode: orn ; op1:x8; op2:x10; dest:x9; op1val:0xffffffff;  op2val:0xfffffbff
TEST_RR_OP(orn, x9, x8, x10, 0x00000000, 0xffffffff, 0xfffffbff, x1, 88, x2)

inst_23:
// rs1==x10, rs2==x9, rd==x8, rs2_val == 4294966783, 
// opcode: orn ; op1:x10; op2:x9; dest:x8; op1val:0xffffffff;  op2val:0xfffffdff
TEST_RR_OP(orn, x8, x10, x9, 0x00000000, 0xffffffff, 0xfffffdff, x1, 92, x2)

inst_24:
// rs1==x6, rs2==x5, rd==x7, rs2_val == 4294967039, 
// opcode: orn ; op1:x6; op2:x5; dest:x7; op1val:0xffffffff;  op2val:0xfffffeff
TEST_RR_OP(orn, x7, x6, x5, 0x00000000, 0xffffffff, 0xfffffeff, x1, 96, x2)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x5, rs2==x7, rd==x6, rs2_val == 4294967167, 
// opcode: orn ; op1:x5; op2:x7; dest:x6; op1val:0xffffffff;  op2val:0xffffff7f
TEST_RR_OP(orn, x6, x5, x7, 0x00000000, 0xffffffff, 0xffffff7f, x8, 0, x9)

inst_26:
// rs1==x7, rs2==x6, rd==x5, rs2_val == 4294967231, 
// opcode: orn ; op1:x7; op2:x6; dest:x5; op1val:0xffffffff;  op2val:0xffffffbf
TEST_RR_OP(orn, x5, x7, x6, 0x00000000, 0xffffffff, 0xffffffbf, x8, 4, x9)

inst_27:
// rs1==x3, rs2==x2, rd==x4, rs2_val == 4294967263, 
// opcode: orn ; op1:x3; op2:x2; dest:x4; op1val:0xffffffff;  op2val:0xffffffdf
TEST_RR_OP(orn, x4, x3, x2, 0x00000000, 0xffffffff, 0xffffffdf, x8, 8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3, rs2_val == 4294967279, 
// opcode: orn ; op1:x2; op2:x4; dest:x3; op1val:0xffffffff;  op2val:0xffffffef
TEST_RR_OP(orn, x3, x2, x4, 0x00000000, 0xffffffff, 0xffffffef, x8, 12, x9)

inst_29:
// rs1==x4, rs2==x3, rd==x2, rs2_val == 4294967287, 
// opcode: orn ; op1:x4; op2:x3; dest:x2; op1val:0xffffffff;  op2val:0xfffffff7
TEST_RR_OP(orn, x2, x4, x3, 0x00000000, 0xffffffff, 0xfffffff7, x8, 16, x9)

inst_30:
// rs1==x1, rs2_val == 4294967291, 
// opcode: orn ; op1:x1; op2:x30; dest:x31; op1val:0xffffffff;  op2val:0xfffffffb
TEST_RR_OP(orn, x31, x1, x30, 0x00000000, 0xffffffff, 0xfffffffb, x8, 20, x9)

inst_31:
// rs1==x0, rs2_val == 4294967293, 
// opcode: orn ; op1:x0; op2:x30; dest:x31; op1val:0x0;  op2val:0xfffffffd
TEST_RR_OP(orn, x31, x0, x30, 0x00000000, 0x0, 0xfffffffd, x8, 24, x9)

inst_32:
// rs2==x1, rs2_val == 4294967294, 
// opcode: orn ; op1:x30; op2:x1; dest:x31; op1val:0xffffffff;  op2val:0xfffffffe
TEST_RR_OP(orn, x31, x30, x1, 0x00000000, 0xffffffff, 0xfffffffe, x8, 28, x9)

inst_33:
// rs2==x0, rs1_val == 2147483647, rs2_val == (2**(xlen)-1)
// opcode: orn ; op1:x30; op2:x0; dest:x31; op1val:0x7fffffff;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x0, 0x00000000, 0x7fffffff, 0x0, x8, 32, x9)

inst_34:
// rd==x1, rs1_val == 3221225471, 
// opcode: orn ; op1:x31; op2:x30; dest:x1; op1val:0xbfffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x1, x31, x30, 0x00000000, 0xbfffffff, 0xffffffff, x8, 36, x9)

inst_35:
// rd==x0, rs1_val == 3758096383, 
// opcode: orn ; op1:x31; op2:x30; dest:x0; op1val:0xdfffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x0, x31, x30, 0x00000000, 0xdfffffff, 0xffffffff, x8, 40, x9)

inst_36:
// rs1_val == 4026531839, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xefffffff, 0xffffffff, x8, 44, x9)

inst_37:
// rs1_val == 4160749567, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xf7ffffff, 0xffffffff, x8, 48, x9)

inst_38:
// rs1_val == 4227858431, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfbffffff, 0xffffffff, x8, 52, x9)

inst_39:
// rs1_val == 4261412863, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfdffffff, 0xffffffff, x8, 56, x9)

inst_40:
// rs1_val == 4278190079, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfeffffff, 0xffffffff, x8, 60, x9)

inst_41:
// rs1_val == 4286578687, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xff7fffff, 0xffffffff, x8, 64, x9)

inst_42:
// rs1_val == 4290772991, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffbfffff, 0xffffffff, x8, 68, x9)

inst_43:
// rs1_val == 4292870143, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffdfffff, 0xffffffff, x8, 72, x9)

inst_44:
// rs1_val == 4293918719, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffefffff, 0xffffffff, x8, 76, x9)

inst_45:
// rs1_val == 4294443007, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfff7ffff, 0xffffffff, x8, 80, x9)

inst_46:
// rs1_val == 4294705151, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffbffff, 0xffffffff, x8, 84, x9)

inst_47:
// rs1_val == 4294836223, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffdffff, 0xffffffff, x8, 88, x9)

inst_48:
// rs1_val == 4294901759, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffeffff, 0xffffffff, x8, 92, x9)

inst_49:
// rs1_val == 4294934527, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffff7fff, 0xffffffff, x8, 96, x9)

inst_50:
// rs1_val == 4294950911, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffbfff, 0xffffffff, x8, 100, x9)

inst_51:
// rs1_val == 4294959103, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffdfff, 0xffffffff, x8, 104, x9)

inst_52:
// rs1_val == 4294963199, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffefff, 0xffffffff, x8, 108, x9)

inst_53:
// rs1_val == 4294965247, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffff7ff, 0xffffffff, x8, 112, x9)

inst_54:
// rs1_val == 4294966271, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffffbff, 0xffffffff, x8, 116, x9)

inst_55:
// rs1_val == 4294966783, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffffdff, 0xffffffff, x8, 120, x9)

inst_56:
// rs1_val == 4294967039, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffffeff, 0xffffffff, x8, 124, x9)

inst_57:
// rs1_val == 4294967167, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffff7f, 0xffffffff, x8, 128, x9)

inst_58:
// rs1_val == 4294967231, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffbf, 0xffffffff, x8, 132, x9)

inst_59:
// rs1_val == 4294967263, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffdf, 0xffffffff, x8, 136, x9)

inst_60:
// rs1_val == 4294967279, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffef, 0xffffffff, x8, 140, x9)

inst_61:
// rs1_val == 4294967287, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffffff7, 0xffffffff, x8, 144, x9)

inst_62:
// rs1_val == 4294967291, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffffffb, 0xffffffff, x8, 148, x9)

inst_63:
// rs1_val == 4294967293, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffffffd, 0xffffffff, x8, 152, x9)

inst_64:
// rs1_val == 4294967294, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xfffffffe, 0xffffffff, x8, 156, x9)

inst_65:
// rs2_val == 2147483648, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x80000000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x80000000, x8, 160, x9)

inst_66:
// rs2_val == 1073741824, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x40000000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x40000000, x8, 164, x9)

inst_67:
// rs2_val == 536870912, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x20000000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x20000000, x8, 168, x9)

inst_68:
// rs2_val == 268435456, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x10000000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x10000000, x8, 172, x9)

inst_69:
// rs2_val == 134217728, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x8000000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x8000000, x8, 176, x9)

inst_70:
// rs2_val == 67108864, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x4000000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x4000000, x8, 180, x9)

inst_71:
// rs2_val == 33554432, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x2000000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x2000000, x8, 184, x9)

inst_72:
// rs2_val == 16777216, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x1000000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x1000000, x8, 188, x9)

inst_73:
// rs2_val == 8388608, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x800000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x800000, x8, 192, x9)

inst_74:
// rs2_val == 4194304, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x400000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x400000, x8, 196, x9)

inst_75:
// rs2_val == 2097152, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x200000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x200000, x8, 200, x9)

inst_76:
// rs2_val == 1048576, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x100000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x100000, x8, 204, x9)

inst_77:
// rs2_val == 524288, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x80000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x80000, x8, 208, x9)

inst_78:
// rs2_val == 262144, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x40000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x40000, x8, 212, x9)

inst_79:
// rs2_val == 131072, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x20000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x20000, x8, 216, x9)

inst_80:
// rs2_val == 65536, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x10000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x10000, x8, 220, x9)

inst_81:
// rs2_val == 32768, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x8000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x8000, x8, 224, x9)

inst_82:
// rs2_val == 16384, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x4000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x4000, x8, 228, x9)

inst_83:
// rs2_val == 8192, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x2000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x2000, x8, 232, x9)

inst_84:
// rs2_val == 4096, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x1000
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x1000, x8, 236, x9)

inst_85:
// rs2_val == 2048, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x800
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x800, x8, 240, x9)

inst_86:
// rs2_val == 1024, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x400
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x400, x8, 244, x9)

inst_87:
// rs2_val == 512, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x200
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x200, x8, 248, x9)

inst_88:
// rs2_val == 256, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x100
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x100, x8, 252, x9)

inst_89:
// rs2_val == 128, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x80
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x80, x8, 256, x9)

inst_90:
// rs2_val == 64, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x40
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x40, x8, 260, x9)

inst_91:
// rs2_val == 32, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x20
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x20, x8, 264, x9)

inst_92:
// rs2_val == 16, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x10
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x10, x8, 268, x9)

inst_93:
// rs2_val == 8, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x8
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x8, x8, 272, x9)

inst_94:
// rs2_val == 4, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x4
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x4, x8, 276, x9)

inst_95:
// rs2_val == 2, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x2
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x2, x8, 280, x9)

inst_96:
// rs1_val == 2147483648, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x80000000, 0xffffffff, x8, 284, x9)

inst_97:
// rs1_val == 1073741824, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x40000000, 0xffffffff, x8, 288, x9)

inst_98:
// rs1_val == 536870912, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x20000000, 0xffffffff, x8, 292, x9)

inst_99:
// rs1_val == 268435456, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x10000000, 0xffffffff, x8, 296, x9)

inst_100:
// rs1_val == 134217728, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x8000000, 0xffffffff, x8, 300, x9)

inst_101:
// rs1_val == 67108864, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x4000000, 0xffffffff, x8, 304, x9)

inst_102:
// rs1_val == 33554432, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x2000000, 0xffffffff, x8, 308, x9)

inst_103:
// rs1_val == 16777216, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1000000, 0xffffffff, x8, 312, x9)

inst_104:
// rs1_val == 8388608, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x800000, 0xffffffff, x8, 316, x9)

inst_105:
// rs1_val == 4194304, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x400000, 0xffffffff, x8, 320, x9)

inst_106:
// rs1_val == 2097152, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x200000, 0xffffffff, x8, 324, x9)

inst_107:
// rs1_val == 1048576, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x100000, 0xffffffff, x8, 328, x9)

inst_108:
// rs1_val == 524288, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x80000, 0xffffffff, x8, 332, x9)

inst_109:
// rs1_val == 262144, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x40000, 0xffffffff, x8, 336, x9)

inst_110:
// rs1_val == 131072, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x20000, 0xffffffff, x8, 340, x9)

inst_111:
// rs1_val == 65536, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x10000, 0xffffffff, x8, 344, x9)

inst_112:
// rs1_val == 32768, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x8000, 0xffffffff, x8, 348, x9)

inst_113:
// rs1_val == 16384, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x4000, 0xffffffff, x8, 352, x9)

inst_114:
// rs1_val == 8192, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x2000, 0xffffffff, x8, 356, x9)

inst_115:
// rs1_val == 4096, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1000, 0xffffffff, x8, 360, x9)

inst_116:
// rs1_val == 2048, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x800, 0xffffffff, x8, 364, x9)

inst_117:
// rs1_val == 1024, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x400, 0xffffffff, x8, 368, x9)

inst_118:
// rs1_val == 512, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x200, 0xffffffff, x8, 372, x9)

inst_119:
// rs1_val == 256, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x100, 0xffffffff, x8, 376, x9)

inst_120:
// rs1_val == 128, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x80, 0xffffffff, x8, 380, x9)

inst_121:
// rs1_val == 64, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x40, 0xffffffff, x8, 384, x9)

inst_122:
// rs1_val == 32, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x20, 0xffffffff, x8, 388, x9)

inst_123:
// rs1_val == 16, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x10, 0xffffffff, x8, 392, x9)

inst_124:
// rs1_val == 8, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x8, 0xffffffff, x8, 396, x9)

inst_125:
// rs1_val == 4, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x4, 0xffffffff, x8, 400, x9)

inst_126:
// rs1_val == 2, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x2, 0xffffffff, x8, 404, x9)

inst_127:
// rs1_val == 1, rs1_val==1 and rs2_val==4294967295
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0xffffffff, x8, 408, x9)

inst_128:
// rs1_val == 0x91766f62 and rs2_val == 0x5570084b 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x91766f62;  op2val:0x5570084b
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x91766f62, 0x5570084b, x8, 412, x9)

inst_129:
// rs1_val == 0xc0fe15dd and rs2_val == 0x9f053821 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xc0fe15dd;  op2val:0x9f053821
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xc0fe15dd, 0x9f053821, x8, 416, x9)

inst_130:
// rs1_val == 0xdc80d916 and rs2_val == 0x2a2a146d 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xdc80d916;  op2val:0x2a2a146d
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xdc80d916, 0x2a2a146d, x8, 420, x9)

inst_131:
// rs1_val == 0x952acffe and rs2_val == 0x25ae27ee 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x952acffe;  op2val:0x25ae27ee
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x952acffe, 0x25ae27ee, x8, 424, x9)

inst_132:
// rs1_val == 0x40a5ff52 and rs2_val == 0xb6f9706f 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x40a5ff52;  op2val:0xb6f9706f
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x40a5ff52, 0xb6f9706f, x8, 428, x9)

inst_133:
// rs1_val == 0xe3f4fca3 and rs2_val == 0xa6c9253a 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xe3f4fca3;  op2val:0xa6c9253a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xe3f4fca3, 0xa6c9253a, x8, 432, x9)

inst_134:
// rs1_val == 0xc2f1c53e and rs2_val == 0xd05668ae 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xc2f1c53e;  op2val:0xd05668ae
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xc2f1c53e, 0xd05668ae, x8, 436, x9)

inst_135:
// rs1_val == 0x9722c9a6 and rs2_val == 0x7bcad7c4 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9722c9a6;  op2val:0x7bcad7c4
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9722c9a6, 0x7bcad7c4, x8, 440, x9)

inst_136:
// rs1_val == 0xf7f1305a and rs2_val == 0x9bedfe39 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xf7f1305a;  op2val:0x9bedfe39
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xf7f1305a, 0x9bedfe39, x8, 444, x9)

inst_137:
// rs1_val == 0xd75739f8 and rs2_val == 0xe6fff3d9 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xd75739f8;  op2val:0xe6fff3d9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xd75739f8, 0xe6fff3d9, x8, 448, x9)

inst_138:
// rs1_val == 0x90efb625 and rs2_val == 0x3150e5fa 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x90efb625;  op2val:0x3150e5fa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x90efb625, 0x3150e5fa, x8, 452, x9)

inst_139:
// rs1_val == 0x1fc493ca and rs2_val == 0x65408c73 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1fc493ca;  op2val:0x65408c73
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1fc493ca, 0x65408c73, x8, 456, x9)

inst_140:
// rs1_val == 0x8e2eac2a and rs2_val == 0xd169a3f8 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x8e2eac2a;  op2val:0xd169a3f8
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x8e2eac2a, 0xd169a3f8, x8, 460, x9)

inst_141:
// rs1_val == 0x35f9377f and rs2_val == 0xf4c30307 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x35f9377f;  op2val:0xf4c30307
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x35f9377f, 0xf4c30307, x8, 464, x9)

inst_142:
// rs1_val == 0x58d548aa and rs2_val == 0xa0569d76 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x58d548aa;  op2val:0xa0569d76
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x58d548aa, 0xa0569d76, x8, 468, x9)

inst_143:
// rs1_val == 0x55d98c6e and rs2_val == 0x2daf9ac7 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55d98c6e;  op2val:0x2daf9ac7
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55d98c6e, 0x2daf9ac7, x8, 472, x9)

inst_144:
// rs1_val == 0x74b8de87 and rs2_val == 0xf273b44c 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x74b8de87;  op2val:0xf273b44c
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x74b8de87, 0xf273b44c, x8, 476, x9)

inst_145:
// rs1_val == 0xccce240c and rs2_val == 0x886c3a30 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xccce240c;  op2val:0x886c3a30
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xccce240c, 0x886c3a30, x8, 480, x9)

inst_146:
// rs1_val == 0xb49c83dc and rs2_val == 0xbb61a9cd 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xb49c83dc;  op2val:0xbb61a9cd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xb49c83dc, 0xbb61a9cd, x8, 484, x9)

inst_147:
// rs1_val == 0x254a9493 and rs2_val == 0xc5521660 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x254a9493;  op2val:0xc5521660
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x254a9493, 0xc5521660, x8, 488, x9)

inst_148:
// rs1_val==4294967295 and rs2_val==4294967295, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0xffffffff, x8, 492, x9)

inst_149:
// rs1_val==4294967295 and rs2_val==0, rs2_val == 0
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x0, x8, 496, x9)

inst_150:
// rs1_val==4294967295 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x9999999a, x8, 500, x9)

inst_151:
// rs1_val==4294967295 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x66666667, x8, 504, x9)

inst_152:
// rs1_val==4294967295 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0xcccccccd, x8, 508, x9)

inst_153:
// rs1_val==4294967295 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x33333334, x8, 512, x9)

inst_154:
// rs1_val==4294967295 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0xaaaaaaab, x8, 516, x9)

inst_155:
// rs1_val==4294967295 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x55555556, x8, 520, x9)

inst_156:
// rs1_val==4294967295 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x99999998, x8, 524, x9)

inst_157:
// rs1_val==4294967295 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x66666665, x8, 528, x9)

inst_158:
// rs1_val==4294967295 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0xcccccccb, x8, 532, x9)

inst_159:
// rs1_val==4294967295 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x33333332, x8, 536, x9)

inst_160:
// rs1_val==4294967295 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0xaaaaaaa9, x8, 540, x9)

inst_161:
// rs1_val==4294967295 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x55555554, x8, 544, x9)

inst_162:
// rs1_val==4294967295 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x99999999, x8, 548, x9)

inst_163:
// rs1_val==4294967295 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x66666666, x8, 552, x9)

inst_164:
// rs1_val==4294967295 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0xcccccccc, x8, 556, x9)

inst_165:
// rs1_val==4294967295 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x33333333, x8, 560, x9)

inst_166:
// rs1_val==4294967295 and rs2_val==2863311530, rs2_val == 2863311530
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0xaaaaaaaa, x8, 564, x9)

inst_167:
// rs1_val==4294967295 and rs2_val==1431655765, rs2_val == 1431655765
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x55555555, x8, 568, x9)

inst_168:
// rs1_val==1 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x1, x8, 572, x9)

inst_169:
// rs1_val==1 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x0, x8, 576, x9)

inst_170:
// rs1_val==1 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x9999999a, x8, 580, x9)

inst_171:
// rs1_val==1 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x66666667, x8, 584, x9)

inst_172:
// rs1_val==1 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0xcccccccd, x8, 588, x9)

inst_173:
// rs1_val==1 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x33333334, x8, 592, x9)

inst_174:
// rs1_val==1 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0xaaaaaaab, x8, 596, x9)

inst_175:
// rs1_val==1 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x55555556, x8, 600, x9)

inst_176:
// rs1_val==1 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x99999998, x8, 604, x9)

inst_177:
// rs1_val==1 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x66666665, x8, 608, x9)

inst_178:
// rs1_val==1 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0xcccccccb, x8, 612, x9)

inst_179:
// rs1_val==1 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x33333332, x8, 616, x9)

inst_180:
// rs1_val==1 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0xaaaaaaa9, x8, 620, x9)

inst_181:
// rs1_val==1 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x55555554, x8, 624, x9)

inst_182:
// rs1_val==1 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x99999999, x8, 628, x9)

inst_183:
// rs1_val==1 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x66666666, x8, 632, x9)

inst_184:
// rs1_val==1 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0xcccccccc, x8, 636, x9)

inst_185:
// rs1_val==1 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x33333333, x8, 640, x9)

inst_186:
// rs1_val==1 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0xaaaaaaaa, x8, 644, x9)

inst_187:
// rs1_val==1 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x1, 0x55555555, x8, 648, x9)

inst_188:
// rs1_val==0 and rs2_val==4294967295, rs1_val == 0
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0xffffffff, x8, 652, x9)

inst_189:
// rs1_val==0 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x1, x8, 656, x9)

inst_190:
// rs1_val==0 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x0, x8, 660, x9)

inst_191:
// rs1_val==0 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x9999999a, x8, 664, x9)

inst_192:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x66666667, x8, 668, x9)

inst_193:
// rs1_val==0 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0xcccccccd, x8, 672, x9)

inst_194:
// rs1_val==0 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x33333334, x8, 676, x9)

inst_195:
// rs1_val==0 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0xaaaaaaab, x8, 680, x9)

inst_196:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x55555556, x8, 684, x9)

inst_197:
// rs1_val==0 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x99999998, x8, 688, x9)

inst_198:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x66666665, x8, 692, x9)

inst_199:
// rs1_val==0 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0xcccccccb, x8, 696, x9)

inst_200:
// rs1_val==0 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x33333332, x8, 700, x9)

inst_201:
// rs1_val==0 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0xaaaaaaa9, x8, 704, x9)

inst_202:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x55555554, x8, 708, x9)

inst_203:
// rs1_val==0 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x99999999, x8, 712, x9)

inst_204:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x66666666, x8, 716, x9)

inst_205:
// rs1_val==0 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0xcccccccc, x8, 720, x9)

inst_206:
// rs1_val==0 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x33333333, x8, 724, x9)

inst_207:
// rs1_val==0 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0xaaaaaaaa, x8, 728, x9)

inst_208:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x0, 0x55555555, x8, 732, x9)

inst_209:
// rs1_val==2576980378 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0xffffffff, x8, 736, x9)

inst_210:
// rs1_val==2576980378 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x1, x8, 740, x9)

inst_211:
// rs1_val==2576980378 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x0, x8, 744, x9)

inst_212:
// rs1_val==2576980378 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x9999999a, x8, 748, x9)

inst_213:
// rs1_val==2576980378 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x66666667, x8, 752, x9)

inst_214:
// rs1_val==2576980378 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0xcccccccd, x8, 756, x9)

inst_215:
// rs1_val==2576980378 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x33333334, x8, 760, x9)

inst_216:
// rs1_val==2576980378 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0xaaaaaaab, x8, 764, x9)

inst_217:
// rs1_val==2576980378 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x55555556, x8, 768, x9)

inst_218:
// rs1_val==2576980378 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x99999998, x8, 772, x9)

inst_219:
// rs1_val==2576980378 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x66666665, x8, 776, x9)

inst_220:
// rs1_val==2576980378 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0xcccccccb, x8, 780, x9)

inst_221:
// rs1_val==2576980378 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x33333332, x8, 784, x9)

inst_222:
// rs1_val==2576980378 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0xaaaaaaa9, x8, 788, x9)

inst_223:
// rs1_val==2576980378 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x55555554, x8, 792, x9)

inst_224:
// rs1_val==2576980378 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x99999999, x8, 796, x9)

inst_225:
// rs1_val==2576980378 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x66666666, x8, 800, x9)

inst_226:
// rs1_val==2576980378 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0xcccccccc, x8, 804, x9)

inst_227:
// rs1_val==2576980378 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x33333333, x8, 808, x9)

inst_228:
// rs1_val==2576980378 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0xaaaaaaaa, x8, 812, x9)

inst_229:
// rs1_val==2576980378 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x9999999a;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x9999999a, 0x55555555, x8, 816, x9)

inst_230:
// rs1_val==1717986919 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0xffffffff, x8, 820, x9)

inst_231:
// rs1_val==1717986919 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x1, x8, 824, x9)

inst_232:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x0, x8, 828, x9)

inst_233:
// rs1_val==1717986919 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x9999999a, x8, 832, x9)

inst_234:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x66666667, x8, 836, x9)

inst_235:
// rs1_val==1717986919 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0xcccccccd, x8, 840, x9)

inst_236:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x33333334, x8, 844, x9)

inst_237:
// rs1_val==1717986919 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0xaaaaaaab, x8, 848, x9)

inst_238:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x55555556, x8, 852, x9)

inst_239:
// rs1_val==1717986919 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x99999998, x8, 856, x9)

inst_240:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x66666665, x8, 860, x9)

inst_241:
// rs1_val==1717986919 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0xcccccccb, x8, 864, x9)

inst_242:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x33333332, x8, 868, x9)

inst_243:
// rs1_val==1717986919 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0xaaaaaaa9, x8, 872, x9)

inst_244:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x55555554, x8, 876, x9)

inst_245:
// rs1_val==1717986919 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x99999999, x8, 880, x9)

inst_246:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x66666666, x8, 884, x9)

inst_247:
// rs1_val==1717986919 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0xcccccccc, x8, 888, x9)

inst_248:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x33333333, x8, 892, x9)

inst_249:
// rs1_val==1717986919 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0xaaaaaaaa, x8, 896, x9)

inst_250:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666667, 0x55555555, x8, 900, x9)

inst_251:
// rs1_val==3435973837 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0xffffffff, x8, 904, x9)

inst_252:
// rs1_val==3435973837 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x1, x8, 908, x9)

inst_253:
// rs1_val==3435973837 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x0, x8, 912, x9)

inst_254:
// rs1_val==3435973837 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x9999999a, x8, 916, x9)

inst_255:
// rs1_val==3435973837 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x66666667, x8, 920, x9)

inst_256:
// rs1_val==3435973837 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0xcccccccd, x8, 924, x9)

inst_257:
// rs1_val==3435973837 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x33333334, x8, 928, x9)

inst_258:
// rs1_val==3435973837 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0xaaaaaaab, x8, 932, x9)

inst_259:
// rs1_val==3435973837 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x55555556, x8, 936, x9)

inst_260:
// rs1_val==3435973837 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x99999998, x8, 940, x9)

inst_261:
// rs1_val==3435973837 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x66666665, x8, 944, x9)

inst_262:
// rs1_val==3435973837 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0xcccccccb, x8, 948, x9)

inst_263:
// rs1_val==3435973837 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x33333332, x8, 952, x9)

inst_264:
// rs1_val==3435973837 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0xaaaaaaa9, x8, 956, x9)

inst_265:
// rs1_val==3435973837 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x55555554, x8, 960, x9)

inst_266:
// rs1_val==3435973837 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x99999999, x8, 964, x9)

inst_267:
// rs1_val==3435973837 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x66666666, x8, 968, x9)

inst_268:
// rs1_val==3435973837 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0xcccccccc, x8, 972, x9)

inst_269:
// rs1_val==3435973837 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x33333333, x8, 976, x9)

inst_270:
// rs1_val==3435973837 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0xaaaaaaaa, x8, 980, x9)

inst_271:
// rs1_val==3435973837 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccd;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccd, 0x55555555, x8, 984, x9)

inst_272:
// rs1_val==858993460 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0xffffffff, x8, 988, x9)

inst_273:
// rs1_val==858993460 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x1, x8, 992, x9)

inst_274:
// rs1_val==858993460 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x0, x8, 996, x9)

inst_275:
// rs1_val==858993460 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x9999999a, x8, 1000, x9)

inst_276:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x66666667, x8, 1004, x9)

inst_277:
// rs1_val==858993460 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0xcccccccd, x8, 1008, x9)

inst_278:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x33333334, x8, 1012, x9)

inst_279:
// rs1_val==858993460 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0xaaaaaaab, x8, 1016, x9)

inst_280:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x55555556, x8, 1020, x9)

inst_281:
// rs1_val==858993460 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x99999998, x8, 1024, x9)

inst_282:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x66666665, x8, 1028, x9)

inst_283:
// rs1_val==858993460 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0xcccccccb, x8, 1032, x9)

inst_284:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x33333332, x8, 1036, x9)

inst_285:
// rs1_val==858993460 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0xaaaaaaa9, x8, 1040, x9)

inst_286:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x55555554, x8, 1044, x9)

inst_287:
// rs1_val==858993460 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x99999999, x8, 1048, x9)

inst_288:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x66666666, x8, 1052, x9)

inst_289:
// rs1_val==858993460 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0xcccccccc, x8, 1056, x9)

inst_290:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x33333333, x8, 1060, x9)

inst_291:
// rs1_val==858993460 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0xaaaaaaaa, x8, 1064, x9)

inst_292:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333334, 0x55555555, x8, 1068, x9)

inst_293:
// rs1_val==2863311531 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0xffffffff, x8, 1072, x9)

inst_294:
// rs1_val==2863311531 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x1, x8, 1076, x9)

inst_295:
// rs1_val==2863311531 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x0, x8, 1080, x9)

inst_296:
// rs1_val==2863311531 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x9999999a, x8, 1084, x9)

inst_297:
// rs1_val==2863311531 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x66666667, x8, 1088, x9)

inst_298:
// rs1_val==2863311531 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0xcccccccd, x8, 1092, x9)

inst_299:
// rs1_val==2863311531 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x33333334, x8, 1096, x9)

inst_300:
// rs1_val==2863311531 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0xaaaaaaab, x8, 1100, x9)

inst_301:
// rs1_val==2863311531 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x55555556, x8, 1104, x9)

inst_302:
// rs1_val==2863311531 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x99999998, x8, 1108, x9)

inst_303:
// rs1_val==2863311531 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x66666665, x8, 1112, x9)

inst_304:
// rs1_val==2863311531 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0xcccccccb, x8, 1116, x9)

inst_305:
// rs1_val==2863311531 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x33333332, x8, 1120, x9)

inst_306:
// rs1_val==2863311531 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0xaaaaaaa9, x8, 1124, x9)

inst_307:
// rs1_val==2863311531 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x55555554, x8, 1128, x9)

inst_308:
// rs1_val==2863311531 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x99999999, x8, 1132, x9)

inst_309:
// rs1_val==2863311531 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x66666666, x8, 1136, x9)

inst_310:
// rs1_val==2863311531 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0xcccccccc, x8, 1140, x9)

inst_311:
// rs1_val==2863311531 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x33333333, x8, 1144, x9)

inst_312:
// rs1_val==2863311531 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0xaaaaaaaa, x8, 1148, x9)

inst_313:
// rs1_val==2863311531 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaab;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaab, 0x55555555, x8, 1152, x9)

inst_314:
// rs1_val==1431655766 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0xffffffff, x8, 1156, x9)

inst_315:
// rs1_val==1431655766 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x1, x8, 1160, x9)

inst_316:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x0, x8, 1164, x9)

inst_317:
// rs1_val==1431655766 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x9999999a, x8, 1168, x9)

inst_318:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x66666667, x8, 1172, x9)

inst_319:
// rs1_val==1431655766 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0xcccccccd, x8, 1176, x9)

inst_320:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x33333334, x8, 1180, x9)

inst_321:
// rs1_val==1431655766 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0xaaaaaaab, x8, 1184, x9)

inst_322:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x55555556, x8, 1188, x9)

inst_323:
// rs1_val==1431655766 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x99999998, x8, 1192, x9)

inst_324:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x66666665, x8, 1196, x9)

inst_325:
// rs1_val==1431655766 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0xcccccccb, x8, 1200, x9)

inst_326:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x33333332, x8, 1204, x9)

inst_327:
// rs1_val==1431655766 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0xaaaaaaa9, x8, 1208, x9)

inst_328:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x55555554, x8, 1212, x9)

inst_329:
// rs1_val==1431655766 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x99999999, x8, 1216, x9)

inst_330:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x66666666, x8, 1220, x9)

inst_331:
// rs1_val==1431655766 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0xcccccccc, x8, 1224, x9)

inst_332:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x33333333, x8, 1228, x9)

inst_333:
// rs1_val==1431655766 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0xaaaaaaaa, x8, 1232, x9)

inst_334:
// rs1_val==3435973836 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x33333334, x8, 1236, x9)

inst_335:
// rs1_val==3435973836 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0xaaaaaaab, x8, 1240, x9)

inst_336:
// rs1_val==3435973836 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x55555556, x8, 1244, x9)

inst_337:
// rs1_val==3435973836 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x99999998, x8, 1248, x9)

inst_338:
// rs1_val==3435973836 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x66666665, x8, 1252, x9)

inst_339:
// rs1_val==3435973836 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0xcccccccb, x8, 1256, x9)

inst_340:
// rs1_val==3435973836 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x33333332, x8, 1260, x9)

inst_341:
// rs1_val==3435973836 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0xaaaaaaa9, x8, 1264, x9)

inst_342:
// rs1_val==3435973836 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x55555554, x8, 1268, x9)

inst_343:
// rs1_val==3435973836 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x99999999, x8, 1272, x9)

inst_344:
// rs1_val==3435973836 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x66666666, x8, 1276, x9)

inst_345:
// rs1_val==3435973836 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0xcccccccc, x8, 1280, x9)

inst_346:
// rs1_val==3435973836 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x33333333, x8, 1284, x9)

inst_347:
// rs1_val==3435973836 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0xaaaaaaaa, x8, 1288, x9)

inst_348:
// rs1_val==3435973836 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x55555555, x8, 1292, x9)

inst_349:
// rs1_val==858993459 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0xffffffff, x8, 1296, x9)

inst_350:
// rs1_val==858993459 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x1, x8, 1300, x9)

inst_351:
// rs1_val==858993459 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x0, x8, 1304, x9)

inst_352:
// rs1_val==858993459 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x9999999a, x8, 1308, x9)

inst_353:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x66666667, x8, 1312, x9)

inst_354:
// rs1_val==858993459 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0xcccccccd, x8, 1316, x9)

inst_355:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x33333334, x8, 1320, x9)

inst_356:
// rs1_val==858993459 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0xaaaaaaab, x8, 1324, x9)

inst_357:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x55555556, x8, 1328, x9)

inst_358:
// rs1_val==858993459 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x99999998, x8, 1332, x9)

inst_359:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x66666665, x8, 1336, x9)

inst_360:
// rs1_val==858993459 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0xcccccccb, x8, 1340, x9)

inst_361:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x33333332, x8, 1344, x9)

inst_362:
// rs1_val==858993459 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0xaaaaaaa9, x8, 1348, x9)

inst_363:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x55555554, x8, 1352, x9)

inst_364:
// rs1_val==858993459 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x99999999, x8, 1356, x9)

inst_365:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x66666666, x8, 1360, x9)

inst_366:
// rs1_val==858993459 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0xcccccccc, x8, 1364, x9)

inst_367:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x33333333, x8, 1368, x9)

inst_368:
// rs1_val==858993459 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0xaaaaaaaa, x8, 1372, x9)

inst_369:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333333, 0x55555555, x8, 1376, x9)

inst_370:
// rs1_val==2863311530 and rs2_val==4294967295, rs1_val == 2863311530
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xffffffff, x8, 1380, x9)

inst_371:
// rs1_val==2863311530 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x1, x8, 1384, x9)

inst_372:
// rs1_val==2863311530 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x0, x8, 1388, x9)

inst_373:
// rs1_val==2863311530 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x9999999a, x8, 1392, x9)

inst_374:
// rs1_val==2863311530 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x66666667, x8, 1396, x9)

inst_375:
// rs1_val==2863311530 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xcccccccd, x8, 1400, x9)

inst_376:
// rs1_val==2863311530 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x33333334, x8, 1404, x9)

inst_377:
// rs1_val==2863311530 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xaaaaaaab, x8, 1408, x9)

inst_378:
// rs1_val==2863311530 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x55555556, x8, 1412, x9)

inst_379:
// rs1_val==2863311530 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x99999998, x8, 1416, x9)

inst_380:
// rs1_val==2863311530 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x66666665, x8, 1420, x9)

inst_381:
// rs1_val==2863311530 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xcccccccb, x8, 1424, x9)

inst_382:
// rs1_val==2863311530 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x33333332, x8, 1428, x9)

inst_383:
// rs1_val==2863311530 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xaaaaaaa9, x8, 1432, x9)

inst_384:
// rs1_val==2863311530 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x55555554, x8, 1436, x9)

inst_385:
// rs1_val==2863311530 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x99999999, x8, 1440, x9)

inst_386:
// rs1_val==2863311530 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x66666666, x8, 1444, x9)

inst_387:
// rs1_val==2863311530 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xcccccccc, x8, 1448, x9)

inst_388:
// rs1_val==2863311530 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x33333333, x8, 1452, x9)

inst_389:
// rs1_val==2863311530 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xaaaaaaaa, x8, 1456, x9)

inst_390:
// rs1_val==2863311530 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0x55555555, x8, 1460, x9)

inst_391:
// rs1_val==1431655765 and rs2_val==4294967295, rs1_val == 1431655765
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0xffffffff, x8, 1464, x9)

inst_392:
// rs1_val==1431655765 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x1, x8, 1468, x9)

inst_393:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x0, x8, 1472, x9)

inst_394:
// rs1_val==1431655765 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x9999999a, x8, 1476, x9)

inst_395:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x66666667, x8, 1480, x9)

inst_396:
// rs1_val==1431655765 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0xcccccccd, x8, 1484, x9)

inst_397:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x33333334, x8, 1488, x9)

inst_398:
// rs1_val==1431655765 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0xaaaaaaab, x8, 1492, x9)

inst_399:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x55555556, x8, 1496, x9)

inst_400:
// rs1_val==1431655765 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x99999998, x8, 1500, x9)

inst_401:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x66666665, x8, 1504, x9)

inst_402:
// rs1_val==1431655765 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0xcccccccb, x8, 1508, x9)

inst_403:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x33333332, x8, 1512, x9)

inst_404:
// rs1_val==1431655765 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0xaaaaaaa9, x8, 1516, x9)

inst_405:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x55555554, x8, 1520, x9)

inst_406:
// rs1_val==1431655765 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x99999999, x8, 1524, x9)

inst_407:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x66666666, x8, 1528, x9)

inst_408:
// rs1_val==1431655765 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0xcccccccc, x8, 1532, x9)

inst_409:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x33333333, x8, 1536, x9)

inst_410:
// rs1_val==1431655765 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0xaaaaaaaa, x8, 1540, x9)

inst_411:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555555, 0x55555555, x8, 1544, x9)

inst_412:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555556, 0x55555555, x8, 1548, x9)

inst_413:
// rs1_val==2576980376 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0xffffffff, x8, 1552, x9)

inst_414:
// rs1_val==2576980376 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x1, x8, 1556, x9)

inst_415:
// rs1_val==2576980376 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x0, x8, 1560, x9)

inst_416:
// rs1_val==2576980376 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x9999999a, x8, 1564, x9)

inst_417:
// rs1_val==2576980376 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x66666667, x8, 1568, x9)

inst_418:
// rs1_val==2576980376 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0xcccccccd, x8, 1572, x9)

inst_419:
// rs1_val==2576980376 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x33333334, x8, 1576, x9)

inst_420:
// rs1_val==2576980376 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0xaaaaaaab, x8, 1580, x9)

inst_421:
// rs1_val==2576980376 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x55555556, x8, 1584, x9)

inst_422:
// rs1_val==2576980376 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x99999998, x8, 1588, x9)

inst_423:
// rs1_val==2576980376 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x66666665, x8, 1592, x9)

inst_424:
// rs1_val==2576980376 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0xcccccccb, x8, 1596, x9)

inst_425:
// rs1_val==2576980376 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x33333332, x8, 1600, x9)

inst_426:
// rs1_val==2576980376 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0xaaaaaaa9, x8, 1604, x9)

inst_427:
// rs1_val==2576980376 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x55555554, x8, 1608, x9)

inst_428:
// rs1_val==2576980376 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x99999999, x8, 1612, x9)

inst_429:
// rs1_val==2576980376 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x66666666, x8, 1616, x9)

inst_430:
// rs1_val==2576980376 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0xcccccccc, x8, 1620, x9)

inst_431:
// rs1_val==2576980376 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x33333333, x8, 1624, x9)

inst_432:
// rs1_val==2576980376 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0xaaaaaaaa, x8, 1628, x9)

inst_433:
// rs1_val==2576980376 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999998;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999998, 0x55555555, x8, 1632, x9)

inst_434:
// rs1_val==1717986917 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0xffffffff, x8, 1636, x9)

inst_435:
// rs1_val==1717986917 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x1, x8, 1640, x9)

inst_436:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x0, x8, 1644, x9)

inst_437:
// rs1_val==1717986917 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x9999999a, x8, 1648, x9)

inst_438:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x66666667, x8, 1652, x9)

inst_439:
// rs1_val==1717986917 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0xcccccccd, x8, 1656, x9)

inst_440:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x33333334, x8, 1660, x9)

inst_441:
// rs1_val==1717986917 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0xaaaaaaab, x8, 1664, x9)

inst_442:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x55555556, x8, 1668, x9)

inst_443:
// rs1_val==1717986917 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x99999998, x8, 1672, x9)

inst_444:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x66666665, x8, 1676, x9)

inst_445:
// rs1_val==1717986917 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0xcccccccb, x8, 1680, x9)

inst_446:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x33333332, x8, 1684, x9)

inst_447:
// rs1_val==1717986917 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0xaaaaaaa9, x8, 1688, x9)

inst_448:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x55555554, x8, 1692, x9)

inst_449:
// rs1_val==1717986917 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x99999999, x8, 1696, x9)

inst_450:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x66666666, x8, 1700, x9)

inst_451:
// rs1_val==1717986917 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0xcccccccc, x8, 1704, x9)

inst_452:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x33333333, x8, 1708, x9)

inst_453:
// rs1_val==1717986917 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0xaaaaaaaa, x8, 1712, x9)

inst_454:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666665, 0x55555555, x8, 1716, x9)

inst_455:
// rs1_val==3435973835 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0xffffffff, x8, 1720, x9)

inst_456:
// rs1_val==3435973835 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x1, x8, 1724, x9)

inst_457:
// rs1_val==3435973835 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x0, x8, 1728, x9)

inst_458:
// rs1_val==3435973835 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x9999999a, x8, 1732, x9)

inst_459:
// rs1_val==3435973835 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x66666667, x8, 1736, x9)

inst_460:
// rs1_val==3435973835 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0xcccccccd, x8, 1740, x9)

inst_461:
// rs1_val==3435973835 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x33333334, x8, 1744, x9)

inst_462:
// rs1_val==3435973835 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0xaaaaaaab, x8, 1748, x9)

inst_463:
// rs1_val==3435973835 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x55555556, x8, 1752, x9)

inst_464:
// rs1_val==3435973835 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x99999998, x8, 1756, x9)

inst_465:
// rs1_val==3435973835 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x66666665, x8, 1760, x9)

inst_466:
// rs1_val==3435973835 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0xcccccccb, x8, 1764, x9)

inst_467:
// rs1_val==3435973835 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x33333332, x8, 1768, x9)

inst_468:
// rs1_val==3435973835 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0xaaaaaaa9, x8, 1772, x9)

inst_469:
// rs1_val==3435973835 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x55555554, x8, 1776, x9)

inst_470:
// rs1_val==3435973835 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x99999999, x8, 1780, x9)

inst_471:
// rs1_val==3435973835 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x66666666, x8, 1784, x9)

inst_472:
// rs1_val==3435973835 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0xcccccccc, x8, 1788, x9)

inst_473:
// rs1_val==3435973835 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x33333333, x8, 1792, x9)

inst_474:
// rs1_val==3435973835 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0xaaaaaaaa, x8, 1796, x9)

inst_475:
// rs1_val==3435973835 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccb;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccb, 0x55555555, x8, 1800, x9)

inst_476:
// rs1_val==858993458 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0xffffffff, x8, 1804, x9)

inst_477:
// rs1_val==858993458 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x1, x8, 1808, x9)

inst_478:
// rs1_val==858993458 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x0, x8, 1812, x9)

inst_479:
// rs1_val==858993458 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x9999999a, x8, 1816, x9)

inst_480:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x66666667, x8, 1820, x9)

inst_481:
// rs1_val==858993458 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0xcccccccd, x8, 1824, x9)

inst_482:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x33333334, x8, 1828, x9)

inst_483:
// rs1_val==858993458 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0xaaaaaaab, x8, 1832, x9)

inst_484:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x55555556, x8, 1836, x9)

inst_485:
// rs1_val==858993458 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x99999998, x8, 1840, x9)

inst_486:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x66666665, x8, 1844, x9)

inst_487:
// rs1_val==858993458 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0xcccccccb, x8, 1848, x9)

inst_488:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x33333332, x8, 1852, x9)

inst_489:
// rs1_val==858993458 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0xaaaaaaa9, x8, 1856, x9)

inst_490:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x55555554, x8, 1860, x9)

inst_491:
// rs1_val==858993458 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x99999999, x8, 1864, x9)

inst_492:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x66666666, x8, 1868, x9)

inst_493:
// rs1_val==858993458 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0xcccccccc, x8, 1872, x9)

inst_494:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x33333333, x8, 1876, x9)

inst_495:
// rs1_val==858993458 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0xaaaaaaaa, x8, 1880, x9)

inst_496:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x33333332, 0x55555555, x8, 1884, x9)

inst_497:
// rs1_val==2863311529 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0xffffffff, x8, 1888, x9)

inst_498:
// rs1_val==2863311529 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x1, x8, 1892, x9)

inst_499:
// rs1_val==2863311529 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x0, x8, 1896, x9)

inst_500:
// rs1_val==2863311529 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x9999999a, x8, 1900, x9)

inst_501:
// rs1_val==2863311529 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x66666667, x8, 1904, x9)

inst_502:
// rs1_val==2863311529 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0xcccccccd, x8, 1908, x9)

inst_503:
// rs1_val==2863311529 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x33333334, x8, 1912, x9)

inst_504:
// rs1_val==2863311529 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0xaaaaaaab, x8, 1916, x9)

inst_505:
// rs1_val==2863311529 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x55555556, x8, 1920, x9)

inst_506:
// rs1_val==2863311529 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x99999998, x8, 1924, x9)

inst_507:
// rs1_val==2863311529 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x66666665, x8, 1928, x9)

inst_508:
// rs1_val==2863311529 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0xcccccccb, x8, 1932, x9)

inst_509:
// rs1_val==2863311529 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x33333332, x8, 1936, x9)

inst_510:
// rs1_val==2863311529 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0xaaaaaaa9, x8, 1940, x9)

inst_511:
// rs1_val==2863311529 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x55555554, x8, 1944, x9)

inst_512:
// rs1_val==2863311529 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x99999999, x8, 1948, x9)

inst_513:
// rs1_val==2863311529 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x66666666, x8, 1952, x9)

inst_514:
// rs1_val==2863311529 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0xcccccccc, x8, 1956, x9)

inst_515:
// rs1_val==2863311529 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x33333333, x8, 1960, x9)

inst_516:
// rs1_val==2863311529 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0xaaaaaaaa, x8, 1964, x9)

inst_517:
// rs1_val==2863311529 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaa9;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xaaaaaaa9, 0x55555555, x8, 1968, x9)

inst_518:
// rs1_val==1431655764 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0xffffffff, x8, 1972, x9)

inst_519:
// rs1_val==1431655764 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x1, x8, 1976, x9)

inst_520:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x0, x8, 1980, x9)

inst_521:
// rs1_val==1431655764 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x9999999a, x8, 1984, x9)

inst_522:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x66666667, x8, 1988, x9)

inst_523:
// rs1_val==1431655764 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0xcccccccd, x8, 1992, x9)

inst_524:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x33333334, x8, 1996, x9)

inst_525:
// rs1_val==1431655764 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0xaaaaaaab, x8, 2000, x9)

inst_526:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x55555556, x8, 2004, x9)

inst_527:
// rs1_val==1431655764 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x99999998, x8, 2008, x9)

inst_528:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x66666665, x8, 2012, x9)

inst_529:
// rs1_val==1431655764 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0xcccccccb, x8, 2016, x9)

inst_530:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x33333332, x8, 2020, x9)

inst_531:
// rs1_val==1431655764 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0xaaaaaaa9, x8, 2024, x9)

inst_532:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x55555554, x8, 2028, x9)

inst_533:
// rs1_val==1431655764 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x99999999, x8, 2032, x9)

inst_534:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x66666666, x8, 2036, x9)

inst_535:
// rs1_val==1431655764 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0xcccccccc, x8, 2040, x9)

inst_536:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x33333333, x8, 2044, x9)
RVTEST_SIGBASE(x8,signature_x8_1)

inst_537:
// rs1_val==1431655764 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0xaaaaaaaa, x8, 0, x9)
RVTEST_SIGBASE(x8,signature_x8_2)

inst_538:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x55555554, 0x55555555, x8, 0, x9)

inst_539:
// rs1_val==2576980377 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0xffffffff, x8, 4, x9)

inst_540:
// rs1_val==2576980377 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x1, x8, 8, x9)

inst_541:
// rs1_val==2576980377 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x0, x8, 12, x9)

inst_542:
// rs1_val==2576980377 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x9999999a, x8, 16, x9)

inst_543:
// rs1_val==2576980377 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x66666667, x8, 20, x9)

inst_544:
// rs1_val==2576980377 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0xcccccccd, x8, 24, x9)

inst_545:
// rs1_val==2576980377 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x33333334, x8, 28, x9)

inst_546:
// rs1_val==2576980377 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0xaaaaaaab, x8, 32, x9)

inst_547:
// rs1_val==2576980377 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x55555556, x8, 36, x9)

inst_548:
// rs1_val==2576980377 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x99999998, x8, 40, x9)

inst_549:
// rs1_val==2576980377 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x66666665, x8, 44, x9)

inst_550:
// rs1_val==2576980377 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0xcccccccb, x8, 48, x9)

inst_551:
// rs1_val==2576980377 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x33333332, x8, 52, x9)

inst_552:
// rs1_val==2576980377 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0xaaaaaaa9, x8, 56, x9)

inst_553:
// rs1_val==2576980377 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x55555554, x8, 60, x9)

inst_554:
// rs1_val==2576980377 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x99999999, x8, 64, x9)

inst_555:
// rs1_val==2576980377 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x66666666, x8, 68, x9)

inst_556:
// rs1_val==2576980377 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0xcccccccc, x8, 72, x9)

inst_557:
// rs1_val==2576980377 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x33333333, x8, 76, x9)

inst_558:
// rs1_val==2576980377 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0xaaaaaaaa, x8, 80, x9)

inst_559:
// rs1_val==2576980377 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x99999999;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x99999999, 0x55555555, x8, 84, x9)

inst_560:
// rs1_val==1717986918 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0xffffffff, x8, 88, x9)

inst_561:
// rs1_val==1717986918 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x1, x8, 92, x9)

inst_562:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x0, x8, 96, x9)

inst_563:
// rs1_val==1717986918 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x9999999a, x8, 100, x9)

inst_564:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x66666667, x8, 104, x9)

inst_565:
// rs1_val==1717986918 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0xcccccccd, x8, 108, x9)

inst_566:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x33333334, x8, 112, x9)

inst_567:
// rs1_val==1717986918 and rs2_val==2863311531, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xaaaaaaab
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0xaaaaaaab, x8, 116, x9)

inst_568:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x55555556, x8, 120, x9)

inst_569:
// rs1_val==1717986918 and rs2_val==2576980376, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x99999998
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x99999998, x8, 124, x9)

inst_570:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x66666665, x8, 128, x9)

inst_571:
// rs1_val==1717986918 and rs2_val==3435973835, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xcccccccb
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0xcccccccb, x8, 132, x9)

inst_572:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x33333332, x8, 136, x9)

inst_573:
// rs1_val==1717986918 and rs2_val==2863311529, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xaaaaaaa9
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0xaaaaaaa9, x8, 140, x9)

inst_574:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x55555554, x8, 144, x9)

inst_575:
// rs1_val==1717986918 and rs2_val==2576980377, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x99999999
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x99999999, x8, 148, x9)

inst_576:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x66666666, x8, 152, x9)

inst_577:
// rs1_val==1717986918 and rs2_val==3435973836, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xcccccccc
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0xcccccccc, x8, 156, x9)

inst_578:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x33333333, x8, 160, x9)

inst_579:
// rs1_val==1717986918 and rs2_val==2863311530, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xaaaaaaaa
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0xaaaaaaaa, x8, 164, x9)

inst_580:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x66666666, 0x55555555, x8, 168, x9)

inst_581:
// rs1_val==3435973836 and rs2_val==4294967295, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0xffffffff, x8, 172, x9)

inst_582:
// rs1_val==3435973836 and rs2_val==1, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x1, x8, 176, x9)

inst_583:
// rs1_val==3435973836 and rs2_val==0, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x0
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x0, x8, 180, x9)

inst_584:
// rs1_val==3435973836 and rs2_val==2576980378, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x9999999a
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x9999999a, x8, 184, x9)

inst_585:
// rs1_val==3435973836 and rs2_val==1717986919, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0x66666667
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0x66666667, x8, 188, x9)

inst_586:
// rs1_val==3435973836 and rs2_val==3435973837, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccc;  op2val:0xcccccccd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xcccccccc, 0xcccccccd, x8, 192, x9)

inst_587:
// rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 1, rs1_val == (2**(xlen)-1), rs1_val > 0 and rs2_val > 0, rs1_val==4294967295 and rs2_val==1
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x1
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x1, x8, 196, x9)

inst_588:
// rs2_val == 2147483647, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x7fffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0x7fffffff, x8, 200, x9)

inst_589:
// rs2_val == 4294967293, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xfffffffd
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xffffffff, 0xfffffffd, x8, 204, x9)

inst_590:
// rs1_val == 2147483647, rs2_val == (2**(xlen)-1)
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0x7fffffff, 0xffffffff, x8, 208, x9)

inst_591:
// rs1_val == 3758096383, 
// opcode: orn ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0xffffffff
TEST_RR_OP(orn, x31, x30, x29, 0x00000000, 0xdfffffff, 0xffffffff, x8, 212, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x8_2:
    .fill 54*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
