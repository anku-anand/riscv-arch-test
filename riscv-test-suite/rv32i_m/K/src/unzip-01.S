
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.2
// timestamp : Mon Mar 28 09:02:04 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/rv32i_k.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the unzip instruction of the RISC-V RV32K,RV32Zk,RV32Zbk,RV32Zbkb,RV32Zkn,RV32Zks extension for the unzip covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IK,RV32IZk,RV32IZbk,RV32IZbkb,RV32IZkn,RV32IZks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",unzip)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",unzip)

RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",unzip)

RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zbkb.*);def TEST_CASE_1=True;",unzip)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==x31, rd==x31, rs1_val == 0xFFFFFFFF 
// opcode: unzip ; op1:x31; dest:x31; op1val:0xffffffff;
li x31, 0xffffffff
unzip x31, x31
sw x31, 0(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x31, 0x00000000)

inst_1:
// rs1 != rd, rs1==x29, rd==x30, rs1_val == 0x00000000 
// opcode: unzip ; op1:x29; dest:x30; op1val:0x0;
li x29, 0x0
unzip x30, x29
sw x30, 4(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x30, 0x00000000)

inst_2:
// rs1==x30, rd==x29, rs1_val == 0x80000000 
// opcode: unzip ; op1:x30; dest:x29; op1val:0x80000000;
li x30, 0x80000000
unzip x29, x30
sw x29, 8(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x00000000)

inst_3:
// rs1==x27, rd==x28, rs1_val == 0x40000000 
// opcode: unzip ; op1:x27; dest:x28; op1val:0x40000000;
li x27, 0x40000000
unzip x28, x27
sw x28, 12(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000)

inst_4:
// rs1==x28, rd==x27, rs1_val == 0xA0000000 
// opcode: unzip ; op1:x28; dest:x27; op1val:0xa0000000;
li x28, 0xa0000000
unzip x27, x28
sw x27, 16(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000)

inst_5:
// rs1==x25, rd==x26, rs1_val == 0x90000000 
// opcode: unzip ; op1:x25; dest:x26; op1val:0x90000000;
li x25, 0x90000000
unzip x26, x25
sw x26, 20(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000)

inst_6:
// rs1==x26, rd==x25, rs1_val == 0xC8000000 
// opcode: unzip ; op1:x26; dest:x25; op1val:0xc8000000;
li x26, 0xc8000000
unzip x25, x26
sw x25, 24(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000)

inst_7:
// rs1==x23, rd==x24, rs1_val == 0x2C000000 
// opcode: unzip ; op1:x23; dest:x24; op1val:0x2c000000;
li x23, 0x2c000000
unzip x24, x23
sw x24, 28(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000)

inst_8:
// rs1==x24, rd==x23, rs1_val == 0xAE000000 
// opcode: unzip ; op1:x24; dest:x23; op1val:0xae000000;
li x24, 0xae000000
unzip x23, x24
sw x23, 32(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000)

inst_9:
// rs1==x21, rd==x22, rs1_val == 0x43000000 
// opcode: unzip ; op1:x21; dest:x22; op1val:0x43000000;
li x21, 0x43000000
unzip x22, x21
sw x22, 36(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000)

inst_10:
// rs1==x22, rd==x21, rs1_val == 0xF1800000 
// opcode: unzip ; op1:x22; dest:x21; op1val:0xf1800000;
li x22, 0xf1800000
unzip x21, x22
sw x21, 40(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000)

inst_11:
// rs1==x19, rd==x20, rs1_val == 0xAEC00000 
// opcode: unzip ; op1:x19; dest:x20; op1val:0xaec00000;
li x19, 0xaec00000
unzip x20, x19
sw x20, 44(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000)

inst_12:
// rs1==x20, rd==x19, rs1_val == 0x99200000 
// opcode: unzip ; op1:x20; dest:x19; op1val:0x99200000;
li x20, 0x99200000
unzip x19, x20
sw x19, 48(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000)

inst_13:
// rs1==x17, rd==x18, rs1_val == 0xB0700000 
// opcode: unzip ; op1:x17; dest:x18; op1val:0xb0700000;
li x17, 0xb0700000
unzip x18, x17
sw x18, 52(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000)

inst_14:
// rs1==x18, rd==x17, rs1_val == 0x35880000 
// opcode: unzip ; op1:x18; dest:x17; op1val:0x35880000;
li x18, 0x35880000
unzip x17, x18
sw x17, 56(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x00000000)

inst_15:
// rs1==x15, rd==x16, rs1_val == 0x5ACC0000 
// opcode: unzip ; op1:x15; dest:x16; op1val:0x5acc0000;
li x15, 0x5acc0000
unzip x16, x15
sw x16, 60(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x16, 0x00000000)

inst_16:
// rs1==x16, rd==x15, rs1_val == 0x5E3A0000 
// opcode: unzip ; op1:x16; dest:x15; op1val:0x5e3a0000;
li x16, 0x5e3a0000
unzip x15, x16
sw x15, 64(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x15, 0x00000000)

inst_17:
// rs1==x13, rd==x14, rs1_val == 0xAE1D0000 
// opcode: unzip ; op1:x13; dest:x14; op1val:0xae1d0000;
li x13, 0xae1d0000
unzip x14, x13
sw x14, 68(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x00000000)

inst_18:
// rs1==x14, rd==x13, rs1_val == 0x6EB38000 
// opcode: unzip ; op1:x14; dest:x13; op1val:0x6eb38000;
li x14, 0x6eb38000
unzip x13, x14
sw x13, 72(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x00000000)

inst_19:
// rs1==x11, rd==x12, rs1_val == 0xBE164000 
// opcode: unzip ; op1:x11; dest:x12; op1val:0xbe164000;
li x11, 0xbe164000
unzip x12, x11
sw x12, 76(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000)

inst_20:
// rs1==x12, rd==x11, rs1_val == 0xCDF1A000 
// opcode: unzip ; op1:x12; dest:x11; op1val:0xcdf1a000;
li x12, 0xcdf1a000
unzip x11, x12
sw x11, 80(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000)

inst_21:
// rs1==x9, rd==x10, rs1_val == 0x804DD000 
// opcode: unzip ; op1:x9; dest:x10; op1val:0x804dd000;
li x9, 0x804dd000
unzip x10, x9
sw x10, 84(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000)

inst_22:
// rs1==x10, rd==x9, rs1_val == 0x3D4F1800 
// opcode: unzip ; op1:x10; dest:x9; op1val:0x3d4f1800;
li x10, 0x3d4f1800
unzip x9, x10
sw x9, 88(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000)

inst_23:
// rs1==x7, rd==x8, rs1_val == 0xBFA44C00 
// opcode: unzip ; op1:x7; dest:x8; op1val:0xbfa44c00;
li x7, 0xbfa44c00
unzip x8, x7
sw x8, 92(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000)

inst_24:
// rs1==x8, rd==x7, rs1_val == 0x4544FA00 
// opcode: unzip ; op1:x8; dest:x7; op1val:0x4544fa00;
li x8, 0x4544fa00
unzip x7, x8
sw x7, 96(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000)

inst_25:
// rs1==x5, rd==x6, rs1_val == 0xC7BFF300 
// opcode: unzip ; op1:x5; dest:x6; op1val:0xc7bff300;
li x5, 0xc7bff300
unzip x6, x5
sw x6, 100(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000)

inst_26:
// rs1==x6, rd==x5, rs1_val == 0xD99D0080 
// opcode: unzip ; op1:x6; dest:x5; op1val:0xd99d0080;
li x6, 0xd99d0080
unzip x5, x6
sw x5, 104(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000)

inst_27:
// rs1==x3, rd==x4, rs1_val == 0x205D39C0 
// opcode: unzip ; op1:x3; dest:x4; op1val:0x205d39c0;
li x3, 0x205d39c0
unzip x4, x3
sw x4, 108(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_28:
// rs1==x4, rd==x3, rs1_val == 0x31711BA0 
// opcode: unzip ; op1:x4; dest:x3; op1val:0x31711ba0;
li x4, 0x31711ba0
unzip x3, x4
sw x3, 0(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000)

inst_29:
// rs1==x1, rd==x2, rs1_val == 0xA99E07B0 
// opcode: unzip ; op1:x1; dest:x2; op1val:0xa99e07b0;
li x1, 0xa99e07b0
unzip x2, x1
sw x2, 4(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000)

inst_30:
// rs1==x2, rd==x1, rs1_val == 0x3BA8EA68 
// opcode: unzip ; op1:x2; dest:x1; op1val:0x3ba8ea68;
li x2, 0x3ba8ea68
unzip x1, x2
sw x1, 8(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x00000000)

inst_31:
// rs1==x0, rs1_val == 0xA14078B4 
// opcode: unzip ; op1:x0; dest:x31; op1val:0x0;
li x0, 0x0
unzip x31, x0
sw x31, 12(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_32:
// rd==x0, rs1_val == 0x89B9B4D6 
// opcode: unzip ; op1:x31; dest:x0; op1val:0x89b9b4d6;
li x31, 0x89b9b4d6
unzip x0, x31
sw x0, 16(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x0, 0x00000000)

inst_33:
// rs1_val == 0x797D76DF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x797d76df;
li x30, 0x797d76df
unzip x31, x30
sw x31, 20(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_34:
// rs1_val == 0x03B1D74C 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x3b1d74c;
li x30, 0x3b1d74c
unzip x31, x30
sw x31, 24(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_35:
// rs1_val == 0xFF7D5EC1 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xff7d5ec1;
li x30, 0xff7d5ec1
unzip x31, x30
sw x31, 28(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_36:
// rs1_val == 0x9BC03E23 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x9bc03e23;
li x30, 0x9bc03e23
unzip x31, x30
sw x31, 32(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_37:
// rs1_val == 0xAF2529C7 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xaf2529c7;
li x30, 0xaf2529c7
unzip x31, x30
sw x31, 36(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_38:
// rs1_val == 0xD670A82F 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xd670a82f;
li x30, 0xd670a82f
unzip x31, x30
sw x31, 40(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_39:
// rs1_val == 0x2054FA9F 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x2054fa9f;
li x30, 0x2054fa9f
unzip x31, x30
sw x31, 44(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_40:
// rs1_val == 0x6E7C0C3F 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x6e7c0c3f;
li x30, 0x6e7c0c3f
unzip x31, x30
sw x31, 48(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_41:
// rs1_val == 0x07AC5F7F 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x7ac5f7f;
li x30, 0x7ac5f7f
unzip x31, x30
sw x31, 52(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_42:
// rs1_val == 0x4B6EA0FF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x4b6ea0ff;
li x30, 0x4b6ea0ff
unzip x31, x30
sw x31, 56(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_43:
// rs1_val == 0xBEA425FF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xbea425ff;
li x30, 0xbea425ff
unzip x31, x30
sw x31, 60(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_44:
// rs1_val == 0x36C2A3FF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x36c2a3ff;
li x30, 0x36c2a3ff
unzip x31, x30
sw x31, 64(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_45:
// rs1_val == 0xD885B7FF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xd885b7ff;
li x30, 0xd885b7ff
unzip x31, x30
sw x31, 68(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_46:
// rs1_val == 0x88042FFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x88042fff;
li x30, 0x88042fff
unzip x31, x30
sw x31, 72(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_47:
// rs1_val == 0x12219FFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x12219fff;
li x30, 0x12219fff
unzip x31, x30
sw x31, 76(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_48:
// rs1_val == 0x2155BFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x2155bfff;
li x30, 0x2155bfff
unzip x31, x30
sw x31, 80(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_49:
// rs1_val == 0x2FF77FFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x2ff77fff;
li x30, 0x2ff77fff
unzip x31, x30
sw x31, 84(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_50:
// rs1_val == 0xBBE8FFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xbbe8ffff;
li x30, 0xbbe8ffff
unzip x31, x30
sw x31, 88(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_51:
// rs1_val == 0xA415FFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xa415ffff;
li x30, 0xa415ffff
unzip x31, x30
sw x31, 92(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_52:
// rs1_val == 0x39A3FFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x39a3ffff;
li x30, 0x39a3ffff
unzip x31, x30
sw x31, 96(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_53:
// rs1_val == 0xDE87FFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xde87ffff;
li x30, 0xde87ffff
unzip x31, x30
sw x31, 100(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_54:
// rs1_val == 0x25AFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x25afffff;
li x30, 0x25afffff
unzip x31, x30
sw x31, 104(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_55:
// rs1_val == 0xAA9FFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xaa9fffff;
li x30, 0xaa9fffff
unzip x31, x30
sw x31, 108(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_56:
// rs1_val == 0x3B3FFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x3b3fffff;
li x30, 0x3b3fffff
unzip x31, x30
sw x31, 112(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_57:
// rs1_val == 0xA67FFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xa67fffff;
li x30, 0xa67fffff
unzip x31, x30
sw x31, 116(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_58:
// rs1_val == 0x2EFFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x2effffff;
li x30, 0x2effffff
unzip x31, x30
sw x31, 120(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_59:
// rs1_val == 0xE1FFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xe1ffffff;
li x30, 0xe1ffffff
unzip x31, x30
sw x31, 124(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_60:
// rs1_val == 0xDBFFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xdbffffff;
li x30, 0xdbffffff
unzip x31, x30
sw x31, 128(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_61:
// rs1_val == 0xC7FFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xc7ffffff;
li x30, 0xc7ffffff
unzip x31, x30
sw x31, 132(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_62:
// rs1_val == 0xAFFFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xafffffff;
li x30, 0xafffffff
unzip x31, x30
sw x31, 136(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_63:
// rs1_val == 0xDFFFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xdfffffff;
li x30, 0xdfffffff
unzip x31, x30
sw x31, 140(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_64:
// rs1_val == 0xBFFFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xbfffffff;
li x30, 0xbfffffff
unzip x31, x30
sw x31, 144(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_65:
// rs1_val == 0x7FFFFFFF 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x7fffffff;
li x30, 0x7fffffff
unzip x31, x30
sw x31, 148(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_66:
// rs1_val == 0xFB710735 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfb710735;
li x30, 0xfb710735
unzip x31, x30
sw x31, 152(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_67:
// rs1_val == 0x586E86CC 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x586e86cc;
li x30, 0x586e86cc
unzip x31, x30
sw x31, 156(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_68:
// rs1_val == 0x2AB8AB68 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x2ab8ab68;
li x30, 0x2ab8ab68
unzip x31, x30
sw x31, 160(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_69:
// rs1_val == 0x126B7F63 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x126b7f63;
li x30, 0x126b7f63
unzip x31, x30
sw x31, 164(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_70:
// rs1_val == 0x09852F28 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x9852f28;
li x30, 0x9852f28
unzip x31, x30
sw x31, 168(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_71:
// rs1_val == 0x07EFF9C1 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x7eff9c1;
li x30, 0x7eff9c1
unzip x31, x30
sw x31, 172(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_72:
// rs1_val == 0x0344DD40 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x344dd40;
li x30, 0x344dd40
unzip x31, x30
sw x31, 176(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_73:
// rs1_val == 0x01E7D160 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x1e7d160;
li x30, 0x1e7d160
unzip x31, x30
sw x31, 180(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_74:
// rs1_val == 0x00B62F26 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xb62f26;
li x30, 0xb62f26
unzip x31, x30
sw x31, 184(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_75:
// rs1_val == 0x004CAF9D 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x4caf9d;
li x30, 0x4caf9d
unzip x31, x30
sw x31, 188(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_76:
// rs1_val == 0x002BB482 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x2bb482;
li x30, 0x2bb482
unzip x31, x30
sw x31, 192(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_77:
// rs1_val == 0x0013EDC7 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x13edc7;
li x30, 0x13edc7
unzip x31, x30
sw x31, 196(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_78:
// rs1_val == 0x00087994 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x87994;
li x30, 0x87994
unzip x31, x30
sw x31, 200(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_79:
// rs1_val == 0x00051426 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x51426;
li x30, 0x51426
unzip x31, x30
sw x31, 204(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_80:
// rs1_val == 0x00028854 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x28854;
li x30, 0x28854
unzip x31, x30
sw x31, 208(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_81:
// rs1_val == 0x000167EE 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x167ee;
li x30, 0x167ee
unzip x31, x30
sw x31, 212(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_82:
// rs1_val == 0x0000FE7A 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfe7a;
li x30, 0xfe7a
unzip x31, x30
sw x31, 216(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_83:
// rs1_val == 0x00005E87 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x5e87;
li x30, 0x5e87
unzip x31, x30
sw x31, 220(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_84:
// rs1_val == 0x000031C3 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x31c3;
li x30, 0x31c3
unzip x31, x30
sw x31, 224(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_85:
// rs1_val == 0x0000192A 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x192a;
li x30, 0x192a
unzip x31, x30
sw x31, 228(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_86:
// rs1_val == 0x00000E79 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xe79;
li x30, 0xe79
unzip x31, x30
sw x31, 232(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_87:
// rs1_val == 0x0000077A 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x77a;
li x30, 0x77a
unzip x31, x30
sw x31, 236(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_88:
// rs1_val == 0x00000233 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x233;
li x30, 0x233
unzip x31, x30
sw x31, 240(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_89:
// rs1_val == 0x00000151 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x151;
li x30, 0x151
unzip x31, x30
sw x31, 244(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_90:
// rs1_val == 0x000000BE 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xbe;
li x30, 0xbe
unzip x31, x30
sw x31, 248(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_91:
// rs1_val == 0x00000077 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x77;
li x30, 0x77
unzip x31, x30
sw x31, 252(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_92:
// rs1_val == 0x00000022 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x22;
li x30, 0x22
unzip x31, x30
sw x31, 256(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_93:
// rs1_val == 0x00000016 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x16;
li x30, 0x16
unzip x31, x30
sw x31, 260(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_94:
// rs1_val == 0x0000000E 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xe;
li x30, 0xe
unzip x31, x30
sw x31, 264(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_95:
// rs1_val == 0x00000004 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x4;
li x30, 0x4
unzip x31, x30
sw x31, 268(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_96:
// rs1_val == 0x00000002 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x2;
li x30, 0x2
unzip x31, x30
sw x31, 272(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_97:
// rs1_val == 0x00000001 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x1;
li x30, 0x1
unzip x31, x30
sw x31, 276(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_98:
// rs1_val == 0x61B0EE0A 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x61b0ee0a;
li x30, 0x61b0ee0a
unzip x31, x30
sw x31, 280(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_99:
// rs1_val == 0x9AE6A229 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x9ae6a229;
li x30, 0x9ae6a229
unzip x31, x30
sw x31, 284(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_100:
// rs1_val == 0xDA6AB32A 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xda6ab32a;
li x30, 0xda6ab32a
unzip x31, x30
sw x31, 288(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_101:
// rs1_val == 0xE38123E6 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xe38123e6;
li x30, 0xe38123e6
unzip x31, x30
sw x31, 292(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_102:
// rs1_val == 0xF4338384 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xf4338384;
li x30, 0xf4338384
unzip x31, x30
sw x31, 296(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_103:
// rs1_val == 0xFB9F15C5 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfb9f15c5;
li x30, 0xfb9f15c5
unzip x31, x30
sw x31, 300(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_104:
// rs1_val == 0xFD680C1D 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfd680c1d;
li x30, 0xfd680c1d
unzip x31, x30
sw x31, 304(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_105:
// rs1_val == 0xFE74E45F 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfe74e45f;
li x30, 0xfe74e45f
unzip x31, x30
sw x31, 308(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_106:
// rs1_val == 0xFF1E5BF0 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xff1e5bf0;
li x30, 0xff1e5bf0
unzip x31, x30
sw x31, 312(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_107:
// rs1_val == 0xFF9C25E7 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xff9c25e7;
li x30, 0xff9c25e7
unzip x31, x30
sw x31, 316(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_108:
// rs1_val == 0xFFCBCF13 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffcbcf13;
li x30, 0xffcbcf13
unzip x31, x30
sw x31, 320(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_109:
// rs1_val == 0xFFE06F87 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffe06f87;
li x30, 0xffe06f87
unzip x31, x30
sw x31, 324(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_110:
// rs1_val == 0xFFF7C831 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfff7c831;
li x30, 0xfff7c831
unzip x31, x30
sw x31, 328(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_111:
// rs1_val == 0xFFFA9778 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffa9778;
li x30, 0xfffa9778
unzip x31, x30
sw x31, 332(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_112:
// rs1_val == 0xFFFCEB44 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffceb44;
li x30, 0xfffceb44
unzip x31, x30
sw x31, 336(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_113:
// rs1_val == 0xFFFE3FBA 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffe3fba;
li x30, 0xfffe3fba
unzip x31, x30
sw x31, 340(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_114:
// rs1_val == 0xFFFF1658 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffff1658;
li x30, 0xffff1658
unzip x31, x30
sw x31, 344(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_115:
// rs1_val == 0xFFFFAC3A 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffffac3a;
li x30, 0xffffac3a
unzip x31, x30
sw x31, 348(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_116:
// rs1_val == 0xFFFFCDF0 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffffcdf0;
li x30, 0xffffcdf0
unzip x31, x30
sw x31, 352(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_117:
// rs1_val == 0xFFFFE684 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffffe684;
li x30, 0xffffe684
unzip x31, x30
sw x31, 356(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_118:
// rs1_val == 0xFFFFF1C6 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffff1c6;
li x30, 0xfffff1c6
unzip x31, x30
sw x31, 360(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_119:
// rs1_val == 0xFFFFF806 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffff806;
li x30, 0xfffff806
unzip x31, x30
sw x31, 364(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_120:
// rs1_val == 0xFFFFFC78 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffffc78;
li x30, 0xfffffc78
unzip x31, x30
sw x31, 368(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_121:
// rs1_val == 0xFFFFFE3B 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffffe3b;
li x30, 0xfffffe3b
unzip x31, x30
sw x31, 372(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_122:
// rs1_val == 0xFFFFFF5A 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffffff5a;
li x30, 0xffffff5a
unzip x31, x30
sw x31, 376(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_123:
// rs1_val == 0xFFFFFF88 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffffff88;
li x30, 0xffffff88
unzip x31, x30
sw x31, 380(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_124:
// rs1_val == 0xFFFFFFC1 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffffffc1;
li x30, 0xffffffc1
unzip x31, x30
sw x31, 384(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_125:
// rs1_val == 0xFFFFFFE8 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xffffffe8;
li x30, 0xffffffe8
unzip x31, x30
sw x31, 388(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_126:
// rs1_val == 0xFFFFFFF1 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffffff1;
li x30, 0xfffffff1
unzip x31, x30
sw x31, 392(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_127:
// rs1_val == 0xFFFFFFF9 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffffff9;
li x30, 0xfffffff9
unzip x31, x30
sw x31, 396(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_128:
// rs1_val == 0xFFFFFFFD 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffffffd;
li x30, 0xfffffffd
unzip x31, x30
sw x31, 400(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_129:
// rs1_val == 0xFFFFFFFE 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xfffffffe;
li x30, 0xfffffffe
unzip x31, x30
sw x31, 404(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_130:
// rs1_val == 0xA14078B4 
// opcode: unzip ; op1:x30; dest:x31; op1val:0xa14078b4;
li x30, 0xa14078b4
unzip x31, x30
sw x31, 408(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)

inst_131:
// rs1_val == 0x89B9B4D6 
// opcode: unzip ; op1:x30; dest:x31; op1val:0x89b9b4d6;
li x30, 0x89b9b4d6
unzip x31, x30
sw x31, 412(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 104*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
